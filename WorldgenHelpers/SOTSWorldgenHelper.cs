using Terraria.ID;
using System.Diagnostics;
using Terraria;
using Terraria.ModLoader;
using SOTS.Items.Planetarium;
using SOTS.Items.Pyramid;
using SOTS.Items.ChestItems;
using System;
using SOTS.Items;
using SOTS.Items.Pyramid.PyramidWalls;
using SOTS.Items.Furniture.AncientGold;
using SOTS.Items.Tide;
using SOTS.Items.Permafrost;
using SOTS.Items.Secrets;
using SOTS.Items.AbandonedVillage;
using SOTS.Items.Planetarium.Furniture;
using SOTS.Items.Planetarium.Blocks;
using SOTS.Items.Earth;
using SOTS.Items.Invidia;
using SOTS.Items.Chaos;
using SOTS.Items.Furniture.Earthen;
using SOTS.Items.Fragments;
using Microsoft.Xna.Framework;
using System.Collections.Generic;
using SOTS.Items.Earth.Glowmoth;
using Terraria.DataStructures;
using SOTS.Items.Conduit;
using Terraria.WorldBuilding;

namespace SOTS.WorldgenHelpers
{
	public class SOTSWorldgenHelper
	{
		public static bool CanExplodeTile(int i, int j)
		{
			bool canKillTile = true;
			if (Main.tile[i, j] != null && Main.tile[i, j].HasTile)
			{
				canKillTile = true;
				if (Main.tileDungeon[(int)Main.tile[i, j].TileType] || Main.tile[i, j].TileType == 88 || Main.tile[i, j].TileType == 21 || Main.tile[i, j].TileType == 26 || Main.tile[i, j].TileType == 107 || Main.tile[i, j].TileType == 108 || Main.tile[i, j].TileType == 111 || Main.tile[i, j].TileType == 226 || Main.tile[i, j].TileType == 237 || Main.tile[i, j].TileType == 221 || Main.tile[i, j].TileType == 222 || Main.tile[i, j].TileType == 223 || Main.tile[i, j].TileType == 211 || Main.tile[i, j].TileType == 404)
				{
					canKillTile = false;
				}
				if (!Main.hardMode && Main.tile[i, j].TileType == 58)
				{
					canKillTile = false;
				}
				if (!TileLoader.CanExplode(i, j))
				{
					canKillTile = false;
				}
			}
			return canKillTile;
		}
		public static bool TrueTileSolid(int i, int j, bool includeActuated = false)
		{
			return (!WorldGen.InWorld(i, j, 20) || Main.tile[i, j].HasTile && Main.tileSolidTop[Main.tile[i, j].TileType] == false && Main.tileSolid[Main.tile[i, j].TileType] == true && (Main.tile[i, j].HasUnactuatedTile || includeActuated));
		}
		public static bool TileTopCapable(int i, int j)
		{
			return (!WorldGen.InWorld(i, j, 20) || Main.tile[i, j].HasTile && (Main.tileSolidTop[Main.tile[i, j].TileType] || Main.tileSolid[Main.tile[i, j].TileType]) && Main.tile[i, j].HasUnactuatedTile);
		}
		public static void GenerateAcediaRoom(int x, int y, Mod mod, int direction = 1)
		{
			if (direction != 1 && direction != -1)
			{
				return;
			}
			int spawnX = x;
			int spawnY = y;
			int[,] _structure = {
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,2,3,3,3,4,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,2,3,3,3,3,3,3,3,3,3,3,3,3,4,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,1,1,1,1,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,1,1,1,1,1,1,1,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,1,1,1,1,1,1,0,0,0,0,0,0,0},
				{0,0,0,1,1,1,1,1,1,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,1,1,1,1,1,1,1,1,1,1,0,0},
				{0,0,0,1,1,1,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,1,1,1,1,1,1,1,1,1,0},
				{1,1,1,1,1,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,1,1,1,1},
				{1,1,1,1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,1},
				{0,1,1,1,5,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1},
				{0,0,1,1,1,1,7,3,3,3,6,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,8,1},
				{0,0,0,0,1,1,1,1,1,1,1,1,1,1,7,7,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,7,7,1,1,1},
				{0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,7,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,8,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
				{0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,3,9,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,7,7,7,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
				{0,0,0,0,1,1,1,1,3,1,3,3,3,4,1,1,1,1,1,1,1,1,1,1,1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,7,7,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0},
				{0,0,0,1,1,1,1,1,5,1,3,1,3,3,3,3,1,1,1,1,1,1,1,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,8,1,1,1,1,1,1,1,1,1,1,1,1,3,3,1,1,1,1,1,1,0,0,0,0,0,0},
				{0,0,0,1,1,1,1,1,1,1,1,1,3,8,1,1,1,1,1,1,1,1,3,3,3,3,3,3,3,3,3,3,3,3,3,1,1,1,1,1,1,1,1,1,2,3,3,7,3,1,1,3,8,1,1,1,1,1,1,0,0,0,0,0,0},
				{0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,1,1,1,1,3,3,3,3,3,8,1,3,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0},
				{0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,1,1,1,1,5,3,3,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,1,1,1,1,11,11,11,11,11,1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,1,1,1,1,11,11,11,11,11,1,1,1,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,1,1,1,11,11,3,3,3,11,11,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,11,11,3,3,3,11,11,1,1,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,1,1,11,3,3,3,3,3,11,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,11,3,3,3,3,3,11,1,1,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,1,1,11,3,3,12,3,3,11,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,11,3,3,13,3,3,11,1,1,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,1,1,11,3,3,3,3,3,11,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,11,3,3,3,3,3,11,1,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,1,11,11,3,3,3,11,11,1,1,7,7,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,1,1,11,11,3,3,3,11,11,1,1,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,1,1,1,11,11,11,11,11,1,1,1,1,1,1,7,3,3,3,3,3,3,3,3,10,3,3,3,3,3,3,3,7,1,1,1,1,1,1,1,11,11,11,11,11,1,1,1,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,1,1,1,1,11,1,1,1,1,1,1,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,1,1,1,1,1,1,11,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,1,1,11,1,1,1,1,1,1,1,11,0,0,0,0,0,0,11,11,11,11,11,11,11,0,0,0,0,0,0,11,1,1,1,1,1,1,1,11,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,11,11,11,11,11,11,11,11,11,0,0,0,0,0,0,0,11,0,11,0,11,0,0,0,0,0,0,0,11,11,11,11,11,11,11,11,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
			};
			int PosX = spawnX - ((_structure.GetLength(1) - 1) * direction); //spawnX and spawnY is where you want the anchor to be when this generates
			int PosY = spawnY - 13;

			for (int i = -4; i < _structure.GetLength(0) + 4; i++)
			{
				for (int j = _structure.GetLength(1) + 3; j >= -4; j--)
				{
					int k = PosX + (j * direction);
					int l = PosY + i;
					if (WorldGen.InWorld(k, l, 30))
					{
						Tile tile = Framing.GetTileSafely(k, l);
						tile.HasTile = true;
						tile.TileType = (ushort)ModContent.TileType<PyramidSlabTile>();
						tile.Slope = 0;
						tile.IsHalfBlock = false;
					}
				}
			}
			//i = vertical, j = horizontal
			for (int confirmPlatforms = 0; confirmPlatforms < 3; confirmPlatforms++)    //Increase the iterations on this outermost for loop if tabletop-objects are not properly spawning
			{
				for (int i = 0; i < _structure.GetLength(0); i++)
				{
					for (int j = _structure.GetLength(1) - 1; j >= 0; j--)
					{
						int k = PosX + (j * direction);
						int l = PosY + i;
						if (WorldGen.InWorld(k, l, 30))
						{
							Tile tile = Framing.GetTileSafely(k, l);
							switch (_structure[i, j])
							{
								case 0:
									tile.HasTile = true;
									tile.TileType = (ushort)ModContent.TileType<PyramidSlabTile>();
									tile.Slope = 0;
									tile.IsHalfBlock = false;
									break;
								case 1:
									tile.HasTile = true;
									tile.TileType = (ushort)ModContent.TileType<OvergrownPyramidTile>();
									tile.Slope = 0;
									tile.IsHalfBlock = false;
									break;
								case 2:
									tile.HasTile = true;
									tile.TileType = (ushort)ModContent.TileType<OvergrownPyramidTile>();
									tile.Slope = (SlopeType)(direction == 1 ? 3 : 4);
									tile.IsHalfBlock = false;
									break;
								case 3:
									if (confirmPlatforms == 0)
									{
										tile.HasTile = false;
										tile.IsHalfBlock = false;
										tile.Slope = 0;
									}
									break;
								case 4:
									tile.HasTile = true;
									tile.TileType = (ushort)ModContent.TileType<OvergrownPyramidTile>();
									tile.Slope = (SlopeType)(direction == 1 ? 4 : 3);
									tile.IsHalfBlock = false;
									break;
								case 5:
									tile.HasTile = true;
									tile.TileType = (ushort)ModContent.TileType<OvergrownPyramidTile>();
									tile.Slope = (SlopeType)(direction == 1 ? 1 : 2);
									tile.IsHalfBlock = false;
									break;
								case 6:
									if (confirmPlatforms == 1)
									{
										tile.HasTile = false;
										tile.Slope = 0;
										tile.IsHalfBlock = false;
										WorldGen.PlaceTile(k - (direction == 1 ? 1 : 0), l, (ushort)ModContent.TileType<CursedAppleTile>(), true, true, -1, 0);
									}
									break;
								case 7:
									tile.HasTile = true;
									tile.TileType = (ushort)ModContent.TileType<OvergrownPyramidTile>();
									tile.Slope = 0;
									tile.IsHalfBlock = true;
									break;
								case 8:
									tile.HasTile = true;
									tile.TileType = (ushort)ModContent.TileType<OvergrownPyramidTile>();
									tile.Slope = (SlopeType)(direction == 1 ? 2 : 1);
									tile.IsHalfBlock = false;
									break;
								case 9:
									if (confirmPlatforms == 0)
									{
										tile.HasTile = false;
										tile.IsHalfBlock = false;
										tile.Slope = 0;
									}
									break;
								case 10:
									if (confirmPlatforms == 2)
									{
										tile.HasTile = false;
										tile.Slope = 0;
										tile.IsHalfBlock = false;
										WorldGen.PlaceTile(k, l, (ushort)ModContent.TileType<AcediaGatewayTile>(), true, true, -1, 0);
									}
									break;
								case 11:
									tile.HasTile = true;
									tile.TileType = (ushort)ModContent.TileType<AcediaPlatingTile>();
									tile.Slope = 0;
									tile.IsHalfBlock = false;
									break;
								case 12:
									if (confirmPlatforms == 2)
									{
										tile.HasTile = false;
										tile.Slope = 0;
										tile.IsHalfBlock = false;
										if (direction == 1)
										{
											WorldGen.PlaceTile(k, l, (ushort)ModContent.TileType<NatureConduitTile>(), true, true, -1, 0);
											ModTileEntity.PlaceEntityNet(k, l, ModContent.TileEntityType<ConduitCounterTE>());
										}
									}
									break;
								case 13:
									if(confirmPlatforms == 2)
									{
										tile.HasTile = false;
										tile.Slope = 0;
										tile.IsHalfBlock = false;
										if (direction == -1)
										{
											WorldGen.PlaceTile(k, l, (ushort)ModContent.TileType<NatureConduitTile>(), true, true, -1, 0);
											ModTileEntity.PlaceEntityNet(k, l, ModContent.TileEntityType<ConduitCounterTE>());
										}
									}
									break;
							}
						}
					}
				}
			}
			_structure = new int[,] {
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,2,2,2,2,2,3,3,3,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2},
				{0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,3,3,2,2,2,2,3,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2},
				{0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,3,3,3,2,2,3,3,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2},
				{0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,3,3,3,3,3,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
				{0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
				{0,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
				{0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,4,4,4,4,4,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,4,4,4,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,4,4,4,4,4,4,4,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,4,4,4,4,4,4,4,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,4,4,4,4,4,4,4,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,4,4,4,4,4,4,4,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,4,4,4,4,4,4,4,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,4,4,4,4,4,4,4,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,4,4,4,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,4,5,5,5,5,5,5,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,4,5,5,5,5,5,5,5,4,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,4,5,5,5,5,5,5,5,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,4,4,4,4,4,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,4,4,4,4,4,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
			};
			//i = vertical, j = horizontal
			for (int i = 0; i < _structure.GetLength(0); i++)
			{
				for (int j = _structure.GetLength(1) - 1; j >= 0; j--)
				{
					int k = PosX + (j * direction);
					int l = PosY + i;
					if (WorldGen.InWorld(k, l, 30))
					{
						Tile tile = Framing.GetTileSafely(k, l);
						switch (_structure[i, j])
						{
							case 0:
								tile.WallType = (ushort)ModContent.WallType<UnsafePyramidWallWall>();
								break;
							case 1:
								tile.WallType = (ushort)ModContent.WallType<UnsafeOvergrownPyramidWallWall>();
								break;
							case 2:
								tile.WallType = (ushort)ModContent.WallType<UnsafePyramidBrickWallWall>();
								break;
							case 3:
								tile.WallType = (ushort)ModContent.WallType<AncientGoldBrickWallTile>();
								break;
							case 4:
								tile.WallType = (ushort)ModContent.WallType<UnsafeAcediaWallWall>();
								break;
							case 5:
								tile.WallType = (ushort)ModContent.WallType<DullPlatingWallWall>();
								break;
							case 6:
								tile.WallType = (ushort)ModContent.WallType<UnsafeAcediaWallWall>();
								break;
						}
					}
				}
			}
		}
		public static bool Full(int x, int y, int lengthX, int lengthY)
		{
			int counting = 0;
			for (int i = 0; i < lengthY; i++)
			{
				for (int j = 0; j < lengthX; j++)
				{
					int k = x + j;
					int l = y + i;
					if (WorldGen.InWorld(k, l, 30))
					{
						Tile tile = Framing.GetTileSafely(k, l);
						if (tile.HasTile)
						{
							counting++;
						}
					}
				}
			}
			if (counting >= lengthX * lengthY)
				return true;
			return false;
		}
		public static bool Empty(int x, int y, int lengthX, int lengthY, int max = 1)
		{
			for (int i = 0; i < lengthY; i++)
			{
				for (int j = 0; j < lengthX; j++)
				{
					int k = x + j;
					int l = y + i;
					if (WorldGen.InWorld(k, l, 30))
					{
						Tile tile = Framing.GetTileSafely(k, l);
						if (tile.HasTile)
						{
							return false;
						}
					}
					else
					{
						return false;
					}
				}
			}
			return true;
		}
		public static bool GenerateSkyArtifact(int x, int y, Mod mod, bool force = false)
		{
			int[,] _structure = {
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,8,1,1,1,1,1,1,1,8,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,9,9,9,9,9,9,9,9,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,9,9,9,9,9,9,9,9,9,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,9,9,9,9,9,9,9,9,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,2,2,2,2,2,2,1,1,3,3,3,3,3,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,0,0,0,0,0,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,3,3,3,3,3,1,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,2,2,2,2,2,2,1,3,3,3,3,3,3,3,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,0,0,0,0,0,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,3,3,0,0,0,3,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,2,2,2,2,2,2,1,3,3,3,3,3,3,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,2,2,2,2,2,1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,0,0,0,0,0,1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,2,2,2,2,2,1,3,3,3,3,3,3,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,2,2,2,2,1,3,3,3,3,3,3,3,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,0,4,0,0,5,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,3,3,0,0,0,3,3,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,2,2,2,1,1,3,3,3,3,3,1,1,2,2,2,2,2,2,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,1,1,3,3,3,3,3,1,1,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,2,2,2,1,1,1,1,1,1,1,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,10},
				{0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,3,3,3,3,3},
				{0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,6},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2}
			};
			int PosX = x;    //spawnX and spawnY is where you want the anchor to be when this generates
			int PosY = y - 40;

			if (!Empty(PosX, PosY, _structure.GetLength(1), _structure.GetLength(0), 5) && !force)
			{
				return false;
			}
			//i = vertical, j = horizontal
			for (int confirmPlatforms = 0; confirmPlatforms < 2; confirmPlatforms++)    //Increase the iterations on this outermost for loop if tabletop-objects are not properly spawning
			{
				for (int i = 0; i < _structure.GetLength(0); i++)
				{
					for (int j = 0; j < _structure.GetLength(1); j++)
					{
						int k = PosX + j;
						int l = PosY + i;
						int k2 = PosX - j;
						if (WorldGen.InWorld(k, l, 30))
						{
							Tile tile = Framing.GetTileSafely(k, l);
							Tile tile2 = Framing.GetTileSafely(k2, l);
							switch (_structure[i, _structure.GetLength(1) - j - 1])
							{
								case 0:
									if (confirmPlatforms == 0)
									{
										tile.HasTile = false;
										tile.IsHalfBlock = false;
										tile.Slope = 0;
									}
									break;
								case 1:
									tile.HasTile = true;
									tile.TileType = (ushort)ModContent.TileType<AvaritianPlatingTile>();
									tile.Slope = 0;
									tile.IsHalfBlock = false;

									tile2.HasTile = true;
									tile2.TileType = (ushort)ModContent.TileType<AvaritianPlatingTile>();
									tile2.Slope = 0;
									tile2.IsHalfBlock = false;
									break;
								case 2:
									tile.HasTile = true;
									tile.WallType = (ushort)ModContent.WallType<DullPlatingWallWall>();
									tile.TileType = (ushort)ModContent.TileType<DullPlatingTile>();
									tile.Slope = 0;
									tile.IsHalfBlock = false;

									tile2.HasTile = true;
									tile2.WallType = (ushort)ModContent.WallType<DullPlatingWallWall>();
									tile2.TileType = (ushort)ModContent.TileType<DullPlatingTile>();
									tile2.Slope = 0;
									tile2.IsHalfBlock = false;
									break;
								case 3:
									tile.HasTile = true;
									tile.TileType = (ushort)ModContent.TileType<PortalPlatingTile>();
									tile.Slope = 0;
									tile.IsHalfBlock = false;

									tile2.HasTile = true;
									tile2.TileType = (ushort)ModContent.TileType<PortalPlatingTile>();
									tile2.Slope = 0;
									tile2.IsHalfBlock = false;
									break;
								case 4:
									if (confirmPlatforms == 1)
									{
										tile.HasTile = false;
										tile.Slope = 0;
										tile.IsHalfBlock = false;
										WorldGen.PlaceTile(k, l, ModContent.TileType<CrystalStatue>(), true, true, -1, 1);

										tile2.HasTile = false;
										tile2.Slope = 0;
										tile2.IsHalfBlock = false;
										WorldGen.PlaceTile(k2 - 1, l, ModContent.TileType<CrystalStatue>(), true, true, -1, 1);
									}
									break;
								case 5:
									if (confirmPlatforms == 1)
									{
										tile.HasTile = false;
										tile.Slope = 0;
										tile.IsHalfBlock = false;
										WorldGen.PlaceChest(k, l, (ushort)ModContent.TileType<LockedStrangeChest>(), style: 1);

										tile2.HasTile = false;
										tile2.Slope = 0;
										tile2.IsHalfBlock = false;
										WorldGen.PlaceChest(k2 - 1, l, (ushort)ModContent.TileType<LockedStrangeChest>(), style: 1);
									}
									break;
								case 6:
									tile.HasTile = true;
									tile.TileType = (ushort)ModContent.TileType<PortalPlatingTile>();
									tile.Slope = 0;
									tile.IsHalfBlock = false;
									break;
								case 7:
									tile.HasTile = false;
									tile.Slope = 0;
									tile.IsHalfBlock = false;
									WorldGen.PlaceTile(k, l, ModContent.TileType<SkyChainTile>(), true, true, -1, 0);

									tile2.HasTile = false;
									tile2.Slope = 0;
									tile2.IsHalfBlock = false;
									WorldGen.PlaceTile(k2, l, ModContent.TileType<SkyChainTile>(), true, true, -1, 0);
									break;
								case 8:
									tile.HasTile = true;
									tile.TileType = (ushort)ModContent.TileType<AvaritianPlatingTile>();
									tile.Slope = 0;
									tile.IsHalfBlock = false;

									tile2.HasTile = true;
									tile2.TileType = (ushort)ModContent.TileType<AvaritianPlatingTile>();
									tile2.Slope = 0;
									tile2.IsHalfBlock = false;

									Tile tile3 = Framing.GetTileSafely(k, l - 1);
									Tile tile4 = Framing.GetTileSafely(k2, l - 1);
									tile3.HasTile = false;
									tile3.Slope = 0;
									tile3.IsHalfBlock = false;
									WorldGen.PlaceTile(k, l - 1, ModContent.TileType<SkyChainTile>(), true, true, -1, 0);

									tile4.HasTile = false;
									tile4.Slope = 0;
									tile4.IsHalfBlock = false;
									WorldGen.PlaceTile(k2, l - 1, ModContent.TileType<SkyChainTile>(), true, true, -1, 0);
									break;
								case 9:
									tile.HasTile = true;
									tile.TileType = (ushort)ModContent.TileType<DullPlatingTile>();
									tile.Slope = 0;
									tile.IsHalfBlock = false;
									tile2.HasTile = true;
									tile2.TileType = (ushort)ModContent.TileType<DullPlatingTile>();
									tile2.Slope = 0;
									tile2.IsHalfBlock = false;
									break;
								case 10:
									tile.HasTile = false;
									tile.Slope = 0;
									tile.IsHalfBlock = false;
									WorldGen.PlaceTile(k, l, ModContent.TileType<AvaritianGatewayTile>(), true, true, -1, 0);
									break;
							}
						}
					}
				}
			}
			int[,] _structure2 = {
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,2,2,2,2,2,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,2,3,3,3,2,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,3,3,3,3,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,3,3,3,3,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,3,3,3,3,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,3,3,3,3,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,3,3,3,3,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,3,3,3,3,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,3,3,3,3,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,1,2,2,2,2,2,2,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,3,3,3,3,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,2,2,2,2,2,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,1,2,2,3,3,3,2,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,3,3,3,3,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,2,3,3,3,2,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,1,2,3,3,3,3,3,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,3,3,3,3,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,3,3,3,3,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,1,2,3,3,3,3,3,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,3,3,3,3,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,3,3,3,3,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,1,2,3,3,3,3,3,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,3,3,3,3,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,3,3,3,3,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,1,2,3,3,3,3,3,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,3,3,3,3,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,3,3,3,3,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,1,2,3,3,3,3,3,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,3,3,3,3,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,3,3,3,3,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,1,2,3,3,3,3,3,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,3,3,3,3,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,3,3,3,3,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,1,2,3,3,3,3,3,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,3,3,3,3,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,3,3,3,3,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,1,2,3,3,3,3,3,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,3,3,3,3,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,3,3,3,3,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,1,2,2,3,3,3,2,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,2,3,3,3,2,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,2,3,3,3,2,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,1,2,2,2,2,2,2,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,2,2,2,2,2,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,2,2,2,2,2,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
				{0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
				{0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,2,2,2,1,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,2,2,2,2,1,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,2,2,2,2,2,2,1,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3},
				{0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,2,2,2,2,2,2,1,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3},
				{0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,1,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3},
				{0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3},
				{0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,1,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3},
				{0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,2,2,2,2,2,2,1,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,2,2,2,2,2,2,1,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
			};
			//i = vertical, j = horizontal
			for (int i = 0; i < _structure2.GetLength(0); i++)
			{
				for (int j = 0; j < _structure2.GetLength(1); j++)
				{
					int k = PosX + j;
					int l = PosY + i;
					int k2 = PosX - j;
					if (WorldGen.InWorld(k, l, 30))
					{
						Tile tile = Framing.GetTileSafely(k, l);
						Tile tile2 = Framing.GetTileSafely(k2, l);
						switch (_structure2[i, _structure2.GetLength(1) - j - 1])
						{
							case 0:
								//tile.WallType = 0;
								break;
							case 1:
								tile.WallType = (ushort)ModContent.WallType<PortalPlatingWallWall>();
								tile2.WallType = (ushort)ModContent.WallType<PortalPlatingWallWall>();
								break;
							case 2:
								tile.WallType = (ushort)ModContent.WallType<DullPlatingWallWall>();
								tile2.WallType = (ushort)ModContent.WallType<DullPlatingWallWall>();
								break;
							case 3:
								tile.WallType = (ushort)ModContent.WallType<HologlassWallWall>();
								tile2.WallType = (ushort)ModContent.WallType<HologlassWallWall>();
								break;
						}
					}
				}
			}
			return true;
		}
		public static bool GenerateArtifactIslands(int x, int y, int type, Mod mod, int x2 = -1, int y2 = -1)
		{
			if (type == 0)
			{
				int[,] _structure = {
				{0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0},
				{2,2,2,2,2,2,2,2,2,3,2,2,2,2,2,2,2,2,2},
				{0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0},
				{0,0,4,4,4,4,4,4,4,5,4,4,4,4,4,4,4,0,0},
				{0,0,0,4,4,0,0,4,4,4,4,4,0,0,4,4,0,0,0},
				{0,0,0,4,0,0,0,0,4,4,4,0,0,0,0,4,0,0,0},
				{0,0,0,4,0,0,0,0,4,4,4,0,0,0,0,4,0,0,0},
				{0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0}
				};
				int PosX = x - 9;  //spawnX and spawnY is where you want the anchor to be when this generates
				int PosY = y - 1;

				if (!Empty(PosX, PosY, _structure.GetLength(1), _structure.GetLength(0), 5))
				{
					return false;
				}
				//i = vertical, j = horizontal
				for (int confirmPlatforms = 0; confirmPlatforms < 2; confirmPlatforms++)    //Increase the iterations on this outermost for loop if tabletop-objects are not properly spawning
				{
					for (int i = 0; i < _structure.GetLength(0); i++)
					{
						for (int j = _structure.GetLength(1) - 1; j >= 0; j--)
						{
							int k = PosX + j;
							int l = PosY + i;
							if (WorldGen.InWorld(k, l, 30))
							{
								Tile tile = Framing.GetTileSafely(k, l);
								switch (_structure[i, j])
								{
									case 0:
										break;
									case 1:
										if (confirmPlatforms == 0)
											tile.HasTile = false;
										WorldGen.PlaceTile(k, l, ModContent.TileType<SkyChainTile>(), true, true, -1, 0);
										tile.Slope = 0;
										tile.IsHalfBlock = false;
										break;
									case 2:
										tile.HasTile = true;
										tile.TileType = (ushort)ModContent.TileType<AvaritianPlatingTile>();
										tile.Slope = 0;
										tile.IsHalfBlock = false;
										break;
									case 3:
										tile.HasTile = true;
										tile.TileType = (ushort)ModContent.TileType<AvaritianPlatingTile>();
										tile.Slope = 0;
										tile.IsHalfBlock = false;
										break;
									case 4:
										tile.HasTile = true;
										tile.TileType = (ushort)ModContent.TileType<DullPlatingTile>();
										tile.WallType = (ushort)ModContent.WallType<DullPlatingWallWall>();
										tile.Slope = 0;
										tile.IsHalfBlock = false;
										break;
									case 5:
										tile.HasTile = true;
										tile.TileType = (ushort)ModContent.TileType<PortalPlatingTile>();
										tile.Slope = 0;
										tile.IsHalfBlock = false;
										break;
								}
							}
						}
					}
				}
			}
			if (type == 1)
			{
				int[,] _structure = {
				{0,0,0,1,1,1,1,1,1,1,1,1,0,0,0},
				{0,0,0,0,2,2,2,2,2,2,2,0,0,0,0},
				{0,0,0,1,1,1,1,1,1,1,1,1,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{1,1,1,1,1,1,1,3,1,1,1,1,1,1,1},
				{0,2,2,2,2,2,2,2,2,2,2,2,2,2,0},
				{0,0,0,2,2,2,2,2,2,2,2,2,0,0,0},
				{0,0,0,0,2,2,2,2,2,2,2,0,0,0,0},
				{0,0,0,0,0,2,2,2,2,2,0,0,0,0,0},
				{0,0,0,0,0,2,2,2,2,2,0,0,0,0,0},
				{0,0,0,0,0,0,2,2,2,0,0,0,0,0,0},
				{0,0,0,0,0,0,2,2,2,0,0,0,0,0,0},
				{0,0,0,0,0,0,2,2,2,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,2,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,2,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,2,0,0,0,0,0,0,0}
				};
				int PosX = x - 7;  //spawnX and spawnY is where you want the anchor to be when this generates
				int PosY = y - 7;
				if (!Empty(PosX, PosY, _structure.GetLength(1), _structure.GetLength(0), 5))
				{
					return false;
				}
				//i = vertical, j = horizontal
				for (int confirmPlatforms = 0; confirmPlatforms < 2; confirmPlatforms++)    //Increase the iterations on this outermost for loop if tabletop-objects are not properly spawning
				{
					for (int i = 0; i < _structure.GetLength(0); i++)
					{
						for (int j = _structure.GetLength(1) - 1; j >= 0; j--)
						{
							int k = PosX + j;
							int l = PosY + i;
							if (WorldGen.InWorld(k, l, 30))
							{
								Tile tile = Framing.GetTileSafely(k, l);
								switch (_structure[i, j])
								{
									case 0:
										break;
									case 1:
										tile.HasTile = true;
										tile.TileType = (ushort)ModContent.TileType<AvaritianPlatingTile>();
										tile.Slope = 0;
										tile.IsHalfBlock = false;
										break;
									case 2:
										tile.HasTile = true;
										tile.TileType = (ushort)ModContent.TileType<DullPlatingTile>();
										tile.WallType = (ushort)ModContent.WallType<DullPlatingWallWall>();
										tile.Slope = 0;
										tile.IsHalfBlock = false;
										break;
									case 3:
										tile.HasTile = true;
										tile.TileType = (ushort)ModContent.TileType<AvaritianPlatingTile>();
										tile.Slope = 0;
										tile.IsHalfBlock = false;
										break;
								}
							}
						}
					}
				}
				int[,] _structure2 = {
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,1,0,0,0,1,0,0,0,0,0},
				{0,0,0,0,0,1,0,0,0,1,0,0,0,0,0},
				{0,0,0,0,0,1,0,0,0,1,0,0,0,0,0},
				{0,0,0,0,0,1,0,0,0,1,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
				};
				//i = vertical, j = horizontal
				for (int i = 0; i < _structure2.GetLength(0); i++)
				{
					for (int j = _structure2.GetLength(1) - 1; j >= 0; j--)
					{
						int k = PosX + j;
						int l = PosY + i;
						if (WorldGen.InWorld(k, l, 30))
						{
							Tile tile = Framing.GetTileSafely(k, l);
							switch (_structure2[i, j])
							{
								case 0:
									break;
								case 1:
									tile.WallType = (ushort)ModContent.WallType<PortalPlatingWallWall>();
									break;
							}
						}
					}
				}
			}
			if (type == 2)
			{
				int[,] _structure = {
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
				{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
				{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
				{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
				{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
				{0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0},
				{1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1},
				{0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0},
				{1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1},
				{1,0,0,2,2,2,2,2,2,2,2,2,2,2,0,0,1},
				{1,1,1,2,2,2,2,2,2,2,2,2,2,2,1,1,1},
				{1,1,0,0,2,2,2,2,2,2,2,2,2,0,0,1,1},
				{1,1,1,1,2,2,2,2,2,2,2,2,2,1,1,1,1},
				{1,1,1,0,0,0,2,2,2,2,2,0,0,0,1,1,1},
				{1,1,1,1,1,1,2,2,2,2,2,1,1,1,1,1,1},
				{1,1,1,1,0,0,0,2,2,2,0,0,0,1,1,1,1},
				{1,1,1,1,1,1,1,2,2,2,1,1,1,1,1,1,1},
				{1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1},
				{1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1}
				};
				int PosX = x - 8;  //spawnX and spawnY is where you want the anchor to be when this generates
				int PosY = y - 8;
				if (!Empty(PosX, PosY, _structure.GetLength(1), _structure.GetLength(0), 5))
				{
					return false;
				}
				//i = vertical, j = horizontal
				for (int confirmPlatforms = 0; confirmPlatforms < 2; confirmPlatforms++)    //Increase the iterations on this outermost for loop if tabletop-objects are not properly spawning
				{
					for (int i = 0; i < _structure.GetLength(0); i++)
					{
						for (int j = _structure.GetLength(1) - 1; j >= 0; j--)
						{
							int k = PosX + j;
							int l = PosY + i;
							if (WorldGen.InWorld(k, l, 30))
							{
								Tile tile = Framing.GetTileSafely(k, l);
								switch (_structure[i, j])
								{
									case 0:
										tile.HasTile = true;
										tile.TileType = (ushort)ModContent.TileType<AvaritianPlatingTile>();
										tile.Slope = 0;
										tile.IsHalfBlock = false;
										break;
									case 1:
										break;
									case 2:
										tile.HasTile = true;
										tile.TileType = (ushort)ModContent.TileType<DullPlatingTile>();
										tile.WallType = (ushort)ModContent.WallType<DullPlatingWallWall>();
										tile.Slope = 0;
										tile.IsHalfBlock = false;
										break;
									case 3:
										tile.HasTile = true;
										tile.TileType = (ushort)ModContent.TileType<AvaritianPlatingTile>();
										tile.Slope = 0;
										tile.IsHalfBlock = false;
										break;
								}
							}
						}
					}
				}
				int[,] _structure2 = {
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0},
				{0,1,2,2,2,2,2,2,2,2,2,2,2,2,2,1,0},
				{0,1,2,3,3,3,3,3,3,3,3,3,3,3,2,1,0},
				{0,1,2,2,2,2,2,2,2,2,2,2,2,2,2,1,0},
				{0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,2,2,2,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,2,2,2,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,2,2,2,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,2,2,2,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
				};
				//i = vertical, j = horizontal
				for (int i = 0; i < _structure2.GetLength(0); i++)
				{
					for (int j = _structure2.GetLength(1) - 1; j >= 0; j--)
					{
						int k = PosX + j;
						int l = PosY + i;
						if (WorldGen.InWorld(k, l, 30))
						{
							Tile tile = Framing.GetTileSafely(k, l);
							switch (_structure2[i, j])
							{
								case 0:
									break;
								case 1:
									tile.WallType = (ushort)ModContent.WallType<PortalPlatingWallWall>();
									break;
								case 2:
									tile.WallType = (ushort)ModContent.WallType<DullPlatingWallWall>();
									break;
								case 3:
									tile.WallType = (ushort)ModContent.WallType<HologlassWallWall>();
									break;
							}
						}
					}
				}
			}
			if (type == 3)
			{
				int[,] _structure = {
				{0,0,0,0,0,1,0,0,0,0,0},
				{0,0,0,0,2,2,2,0,0,0,0},
				{2,2,2,2,2,3,2,2,2,2,2},
				{0,4,4,4,2,2,2,4,4,4,0},
				{0,0,4,4,4,2,4,4,4,0,0},
				{0,0,0,4,4,2,4,4,0,0,0},
				{0,0,0,0,4,2,4,0,0,0,0},
				{0,0,0,0,0,2,0,0,0,0,0}
				};
				int PosX = x - 5;  //spawnX and spawnY is where you want the anchor to be when this generates
				int PosY = y - 2;
				if (!Empty(PosX, PosY, _structure.GetLength(1), _structure.GetLength(0), 5))
				{
					return false;
				}
				//i = vertical, j = horizontal
				for (int confirmPlatforms = 0; confirmPlatforms < 2; confirmPlatforms++)    //Increase the iterations on this outermost for loop if tabletop-objects are not properly spawning
				{
					for (int i = 0; i < _structure.GetLength(0); i++)
					{
						for (int j = _structure.GetLength(1) - 1; j >= 0; j--)
						{
							int k = PosX + j;
							int l = PosY + i;
							if (WorldGen.InWorld(k, l, 30))
							{
								Tile tile = Framing.GetTileSafely(k, l);
								switch (_structure[i, j])
								{
									case 0:
										break;
									case 1:
										if (confirmPlatforms == 0)
											tile.HasTile = false;
										WorldGen.PlaceTile(k, l, (ushort)ModContent.TileType<SkyChainTile>(), true, true, -1, 0);
										tile.Slope = 0;
										tile.IsHalfBlock = false;
										break;
									case 2:
										tile.HasTile = true;
										tile.TileType = (ushort)ModContent.TileType<AvaritianPlatingTile>();
										tile.Slope = 0;
										tile.IsHalfBlock = false;
										break;
									case 3:
										tile.HasTile = true;
										tile.TileType = (ushort)ModContent.TileType<PortalPlatingTile>();
										tile.Slope = 0;
										tile.IsHalfBlock = false;
										break;
									case 4:
										tile.HasTile = true;
										tile.TileType = (ushort)ModContent.TileType<DullPlatingTile>();
										tile.WallType = (ushort)ModContent.WallType<DullPlatingWallWall>();
										tile.Slope = 0;
										tile.IsHalfBlock = false;
										break;
								}
							}
						}
					}
				}
			}
			if (type == 4)
			{
				int[,] _structure = {
				{0,1,1,1,1,1,1,1,1,1,1,1,0},
				{2,2,2,1,1,1,1,1,1,1,2,2,2},
				{2,3,2,2,2,2,2,2,2,2,2,3,2},
				{0,2,2,1,1,1,1,1,1,1,2,2,0},
				{0,0,0,0,1,1,1,1,1,0,2,0,0},
				{0,0,0,0,0,1,1,1,0,0,2,0,0},
				{0,0,0,0,0,1,1,1,0,0,2,0,0},
				{0,0,0,2,2,1,1,1,0,2,2,0,0},
				{0,0,2,2,0,1,1,1,2,2,0,0,0},
				{0,0,2,0,0,1,1,1,0,0,0,0,0},
				{0,0,2,0,0,1,1,1,0,0,0,0,0},
				{0,0,2,0,0,0,1,0,0,0,0,0,0},
				{0,0,2,2,0,0,1,0,0,0,0,0,0},
				{0,0,0,2,2,0,1,0,0,0,0,0,0},
				{0,0,0,0,2,2,2,2,0,0,0,0,0},
				{0,0,0,0,0,2,2,2,0,0,0,0,0},
				{0,0,0,0,0,0,2,0,0,0,0,0,0},
				{0,0,0,0,0,0,2,0,0,0,0,0,0}
				};
				int PosX = x - 6;  //spawnX and spawnY is where you want the anchor to be when this generates
				int PosY = y - 0;
				if (!Empty(PosX, PosY, _structure.GetLength(1), _structure.GetLength(0), 5))
				{
					return false;
				}
				//i = vertical, j = horizontal
				for (int confirmPlatforms = 0; confirmPlatforms < 2; confirmPlatforms++)    //Increase the iterations on this outermost for loop if tabletop-objects are not properly spawning
				{
					for (int i = 0; i < _structure.GetLength(0); i++)
					{
						for (int j = _structure.GetLength(1) - 1; j >= 0; j--)
						{
							int k = PosX + j;
							int l = PosY + i;
							if (WorldGen.InWorld(k, l, 30))
							{
								Tile tile = Framing.GetTileSafely(k, l);
								switch (_structure[i, j])
								{
									case 0:
										break;
									case 1:
										tile.HasTile = true;
										tile.TileType = (ushort)ModContent.TileType<DullPlatingTile>();
										tile.WallType = (ushort)ModContent.WallType<DullPlatingWallWall>();
										tile.Slope = 0;
										tile.IsHalfBlock = false;
										break;
									case 2:
										tile.HasTile = true;
										tile.TileType = (ushort)ModContent.TileType<AvaritianPlatingTile>();
										tile.Slope = 0;
										tile.IsHalfBlock = false;
										break;
									case 3:
										tile.HasTile = true;
										tile.TileType = (ushort)ModContent.TileType<PortalPlatingTile>();
										tile.Slope = 0;
										tile.IsHalfBlock = false;
										break;
								}
							}
						}
					}
				}
				int[,] _structure2 = {
				{0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,1,0,0,0},
				{0,0,0,0,0,0,0,0,1,1,0,0,0},
				{0,0,0,0,0,0,0,0,1,1,0,0,0},
				{0,0,0,0,0,0,0,0,1,0,0,0,0},
				{0,0,0,0,1,0,0,0,0,0,0,0,0},
				{0,0,0,1,1,0,0,0,0,0,0,0,0},
				{0,0,0,1,1,0,0,0,0,0,0,0,0},
				{0,0,0,1,1,1,2,0,0,0,0,0,0},
				{0,0,0,0,1,1,2,0,0,0,0,0,0},
				{0,0,0,0,0,1,2,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0}
				};
				//i = vertical, j = horizontal
				for (int i = 0; i < _structure2.GetLength(0); i++)
				{
					for (int j = _structure2.GetLength(1) - 1; j >= 0; j--)
					{
						int k = PosX + j;
						int l = PosY + i;
						if (WorldGen.InWorld(k, l, 30))
						{
							Tile tile = Framing.GetTileSafely(k, l);
							switch (_structure2[i, j])
							{
								case 0:
									break;
								case 1:
									tile.WallType = (ushort)ModContent.WallType<PortalPlatingWallWall>();
									break;
								case 2:
									tile.WallType = (ushort)ModContent.WallType<DullPlatingWallWall>();
									break;
							}
						}
					}
				}
			}
			if (type == 5)
			{
				int[,] _structure = {
				{0,1,1,1,1,1,1,1,0},
				{0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0},
				{1,1,1,1,1,1,1,1,1},
				{1,2,2,2,2,2,2,2,2},
				{1,1,1,1,1,1,1,1,0},
				{0,2,2,2,2,2,2,1,0},
				{0,0,1,1,1,1,1,1,0},
				{0,0,1,2,2,2,2,0,0},
				{0,0,1,1,1,1,0,0,0},
				{0,0,0,2,2,1,0,0,0},
				{0,0,0,0,1,1,0,0,0},
				{0,0,0,0,1,0,0,0,0}
				};
				int PosX = x - 4;  //spawnX and spawnY is where you want the anchor to be when this generates
				int PosY = y - 5;
				if (!Empty(PosX, PosY, _structure.GetLength(1), _structure.GetLength(0), 5))
				{
					return false;
				}
				//i = vertical, j = horizontal
				for (int confirmPlatforms = 0; confirmPlatforms < 2; confirmPlatforms++)    //Increase the iterations on this outermost for loop if tabletop-objects are not properly spawning
				{
					for (int i = 0; i < _structure.GetLength(0); i++)
					{
						for (int j = _structure.GetLength(1) - 1; j >= 0; j--)
						{
							int k = PosX + j;
							int l = PosY + i;
							if (WorldGen.InWorld(k, l, 30))
							{
								Tile tile = Framing.GetTileSafely(k, l);
								switch (_structure[i, j])
								{
									case 0:
										break;
									case 1:
										tile.HasTile = true;
										tile.TileType = (ushort)ModContent.TileType<DullPlatingTile>();
										tile.WallType = (ushort)ModContent.WallType<DullPlatingWallWall>();
										tile.Slope = 0;
										tile.IsHalfBlock = false;
										break;
									case 2:
										tile.HasTile = true;
										tile.TileType = (ushort)ModContent.TileType<AvaritianPlatingTile>();
										tile.Slope = 0;
										tile.IsHalfBlock = false;
										break;
								}
							}
						}
					}
				}
				int[,] _structure2 = {
				{0,0,0,0,0,0,0,0,0},
				{0,0,1,2,2,2,1,0,0},
				{0,0,1,2,3,2,1,0,0},
				{0,0,1,2,3,2,1,0,0},
				{0,0,1,2,2,2,1,0,0},
				{0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0}
				};
				//i = vertical, j = horizontal
				for (int i = 0; i < _structure2.GetLength(0); i++)
				{
					for (int j = _structure2.GetLength(1) - 1; j >= 0; j--)
					{
						int k = PosX + j;
						int l = PosY + i;
						if (WorldGen.InWorld(k, l, 30))
						{
							Tile tile = Framing.GetTileSafely(k, l);
							switch (_structure2[i, j])
							{
								case 0:
									break;
								case 1:
									tile.WallType = (ushort)ModContent.WallType<PortalPlatingWallWall>();
									break;
								case 2:
									tile.WallType = (ushort)ModContent.WallType<DullPlatingWallWall>();
									break;
								case 3:
									tile.WallType = (ushort)ModContent.WallType<HologlassWallWall>();
									break;
							}
						}
					}
				}

			}
			if (type == 6)
			{
				int[,] _structure = {
				{0,0,0,0,1,0,0,0,0},
				{2,2,2,2,3,2,2,2,2},
				{0,0,4,4,4,4,4,0,0},
				{0,2,2,2,2,2,2,2,0},
				{0,0,0,4,4,4,0,0,0},
				{0,0,2,2,2,2,2,0,0},
				{0,0,0,0,4,0,0,0,0},
				{0,0,0,2,2,2,0,0,0},
				{0,0,0,0,2,0,0,0,0}
				};
				int PosX = x - 4;  //spawnX and spawnY is where you want the anchor to be when this generates
				int PosY = y - 1;
				if (!Empty(PosX, PosY, _structure.GetLength(1), _structure.GetLength(0), 5))
				{
					return false;
				}
				//i = vertical, j = horizontal
				for (int confirmPlatforms = 0; confirmPlatforms < 2; confirmPlatforms++)    //Increase the iterations on this outermost for loop if tabletop-objects are not properly spawning
				{
					for (int i = 0; i < _structure.GetLength(0); i++)
					{
						for (int j = _structure.GetLength(1) - 1; j >= 0; j--)
						{
							int k = PosX + j;
							int l = PosY + i;
							if (WorldGen.InWorld(k, l, 30))
							{
								Tile tile = Framing.GetTileSafely(k, l);
								switch (_structure[i, j])
								{
									case 0:
										break;
									case 1:
										if (confirmPlatforms == 0)
											tile.HasTile = false;
										WorldGen.PlaceTile(k, l, (ushort)ModContent.TileType<SkyChainTile>(), true, true, -1, 0);
										tile.Slope = 0;
										tile.IsHalfBlock = false;
										break;
									case 2:
										tile.HasTile = true;
										tile.TileType = (ushort)ModContent.TileType<AvaritianPlatingTile>();
										tile.Slope = 0;
										tile.IsHalfBlock = false;
										break;
									case 3:
										tile.HasTile = true;
										tile.TileType = (ushort)ModContent.TileType<AvaritianPlatingTile>();
										tile.Slope = 0;
										tile.IsHalfBlock = false;
										break;
									case 4:
										tile.HasTile = true;
										tile.TileType = (ushort)ModContent.TileType<DullPlatingTile>();
										tile.WallType = (ushort)ModContent.WallType<DullPlatingWallWall>();
										tile.Slope = 0;
										tile.IsHalfBlock = false;
										break;
								}
							}
						}
					}
				}
			}
			if (type == 7)
			{
				int[,] _structure = {
				{0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0},
				{2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
				{2,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,2},
				{0,4,2,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,2,4,0},
				{0,0,2,0,2,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,2,0,2,0,0},
				{0,0,0,0,2,0,0,0,2,2,0,0,0,0,4,4,4,0,0,0,0,2,2,0,0,0,2,0,0,0,0},
				{0,0,0,0,0,0,0,2,2,0,0,0,2,2,2,4,2,2,2,0,0,0,2,2,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,2,2,0,0,0,2,2,0,0,4,0,0,2,2,0,0,0,2,2,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,4,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
				};
				int PosX = x - 15; //spawnX and spawnY is where you want the anchor to be when this generates
				int PosY = y - 1;
				if (!Empty(PosX, PosY, _structure.GetLength(1), _structure.GetLength(0), 5))
				{
					return false;
				}
				//i = vertical, j = horizontal
				for (int confirmPlatforms = 0; confirmPlatforms < 2; confirmPlatforms++)    //Increase the iterations on this outermost for loop if tabletop-objects are not properly spawning
				{
					for (int i = 0; i < _structure.GetLength(0); i++)
					{
						for (int j = _structure.GetLength(1) - 1; j >= 0; j--)
						{
							int k = PosX + j;
							int l = PosY + i;
							if (WorldGen.InWorld(k, l, 30))
							{
								Tile tile = Framing.GetTileSafely(k, l);
								switch (_structure[i, j])
								{
									case 0:
										break;
									case 1:
										if (confirmPlatforms == 0)
											tile.HasTile = false;
										WorldGen.PlaceTile(k, l, (ushort)ModContent.TileType<SkyChainTile>(), true, true, -1, 0);
										tile.Slope = 0;
										tile.IsHalfBlock = false;
										break;
									case 2:
										tile.HasTile = true;
										tile.TileType = (ushort)ModContent.TileType<AvaritianPlatingTile>();
										tile.Slope = 0;
										tile.IsHalfBlock = false;
										break;
									case 3:
										tile.HasTile = true;
										tile.TileType = (ushort)ModContent.TileType<AvaritianPlatingTile>();
										tile.Slope = 0;
										tile.IsHalfBlock = false;
										break;
									case 4:
										tile.HasTile = true;
										tile.TileType = (ushort)ModContent.TileType<DullPlatingTile>();
										tile.WallType = (ushort)ModContent.WallType<DullPlatingWallWall>();
										tile.Slope = 0;
										tile.IsHalfBlock = false;
										break;
								}
							}
						}
					}
				}
				int[,] _structure2 = {
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0},
				{0,0,0,0,0,1,1,1,0,0,1,1,1,1,0,0,0,1,1,1,1,0,0,1,1,1,0,0,0,0,0},
				{0,0,0,0,0,0,1,0,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,0,1,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,1,1,1,0,0,1,1,0,1,1,0,0,1,1,1,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
				};
				//i = vertical, j = horizontal
				for (int i = 0; i < _structure2.GetLength(0); i++)
				{
					for (int j = _structure2.GetLength(1) - 1; j >= 0; j--)
					{
						int k = PosX + j;
						int l = PosY + i;
						if (WorldGen.InWorld(k, l, 30))
						{
							Tile tile = Framing.GetTileSafely(k, l);
							switch (_structure2[i, j])
							{
								case 0:
									break;
								case 1:
									tile.WallType = (ushort)ModContent.WallType<PortalPlatingWallWall>();
									break;
							}
						}
					}
				}

			}
			if (type == 8)
			{
				int[,] _structure = {
				{0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{1,1,1,1,0,0,0,1,1,1,2,1,1,1,0,0,0,1,1,1,1},
				{3,3,3,3,0,0,0,3,3,3,3,3,3,3,0,0,0,3,3,3,3},
				{3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3},
				{0,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,0},
				{0,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,0},
				{0,0,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,0,0},
				{0,0,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,0,0},
				{0,0,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,0,0},
				{0,0,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,0,0},
				{0,0,3,3,3,0,0,0,0,0,0,0,0,0,0,0,3,3,3,0,0},
				{0,0,0,3,3,0,0,0,0,0,0,0,0,0,0,0,3,3,0,0,0},
				{0,0,0,3,3,3,0,0,0,0,0,0,0,0,0,3,3,3,0,0,0},
				{0,0,0,3,3,3,3,1,1,1,1,1,1,1,3,3,3,3,0,0,0},
				{0,0,0,0,3,3,3,3,3,3,3,3,3,3,3,3,3,0,0,0,0},
				{0,0,0,0,3,3,3,3,3,3,3,3,3,3,3,3,3,0,0,0,0},
				{0,0,0,0,0,3,3,3,3,3,3,3,3,3,3,3,0,0,0,0,0},
				{0,0,0,0,0,0,3,3,3,3,3,3,3,3,3,0,0,0,0,0,0},
				{0,0,0,0,0,0,3,3,3,3,3,3,3,3,3,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,3,3,3,3,3,3,3,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,3,3,3,3,3,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,3,3,3,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,3,3,3,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,3,3,3,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0}
				};
				int PosX = x - 10; //spawnX and spawnY is where you want the anchor to be when this generates
				int PosY = y - 6;
				if (!Empty(PosX, PosY, _structure.GetLength(1), _structure.GetLength(0), 5))
				{
					return false;
				}
				//i = vertical, j = horizontal
				for (int confirmPlatforms = 0; confirmPlatforms < 2; confirmPlatforms++)    //Increase the iterations on this outermost for loop if tabletop-objects are not properly spawning
				{
					for (int i = 0; i < _structure.GetLength(0); i++)
					{
						for (int j = _structure.GetLength(1) - 1; j >= 0; j--)
						{
							int k = PosX + j;
							int l = PosY + i;
							if (WorldGen.InWorld(k, l, 30))
							{
								Tile tile = Framing.GetTileSafely(k, l);
								switch (_structure[i, j])
								{
									case 0:
										break;
									case 1:
										tile.HasTile = true;
										tile.TileType = (ushort)ModContent.TileType<AvaritianPlatingTile>();
										tile.Slope = 0;
										tile.IsHalfBlock = false;
										break;
									case 2:
										tile.HasTile = true;
										tile.TileType = (ushort)ModContent.TileType<AvaritianPlatingTile>();
										tile.Slope = 0;
										tile.IsHalfBlock = false;
										break;
									case 3:
										tile.HasTile = true;
										tile.TileType = (ushort)ModContent.TileType<DullPlatingTile>();
										tile.WallType = (ushort)ModContent.WallType<DullPlatingWallWall>();
										tile.Slope = 0;
										tile.IsHalfBlock = false;
										break;
								}
							}
						}
					}
				}
				int[,] _structure2 = {
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,1,2,2,2,2,2,1,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,1,2,3,3,3,2,1,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,1,2,3,3,3,2,1,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,1,2,3,3,3,2,1,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,1,2,2,2,2,2,1,0,0,0,0,0,0,0},
				{0,0,0,0,1,1,1,1,0,0,2,2,0,1,1,1,1,0,0,0,0},
				{0,0,0,0,2,2,2,1,0,0,0,0,0,1,2,2,2,0,0,0,0},
				{0,0,0,0,2,2,2,1,1,1,1,1,1,1,2,2,2,0,0,0,0},
				{0,0,0,0,2,2,2,1,2,2,2,2,2,1,2,2,2,0,0,0,0},
				{0,0,0,0,2,2,2,1,2,3,3,3,2,1,2,2,2,0,0,0,0},
				{0,0,0,0,2,2,2,1,2,3,3,3,2,1,2,2,2,0,0,0,0},
				{0,0,0,0,2,2,2,1,2,3,3,3,2,1,2,2,2,0,0,0,0},
				{0,0,0,0,2,2,2,1,2,3,3,3,2,1,2,2,2,0,0,0,0},
				{0,0,0,0,2,2,2,1,2,3,3,3,2,1,2,2,2,0,0,0,0},
				{0,0,0,0,2,2,2,1,2,3,3,3,2,1,2,2,2,0,0,0,0},
				{0,0,0,0,2,2,2,1,2,3,3,3,2,1,2,2,2,0,0,0,0},
				{0,0,0,0,2,2,2,1,2,2,2,2,2,1,2,2,2,0,0,0,0},
				{0,0,0,0,0,2,2,1,1,1,1,1,1,1,0,0,0,0,0,0,0},
				{0,0,0,0,0,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,2,2,2,2,2,2,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
				};
				//i = vertical, j = horizontal
				for (int i = 0; i < _structure2.GetLength(0); i++)
				{
					for (int j = _structure2.GetLength(1) - 1; j >= 0; j--)
					{
						int k = PosX + j;
						int l = PosY + i;
						if (WorldGen.InWorld(k, l, 30))
						{
							Tile tile = Framing.GetTileSafely(k, l);
							switch (_structure2[i, j])
							{
								case 0:
									break;
								case 1:
									tile.WallType = (ushort)ModContent.WallType<PortalPlatingWallWall>();
									break;
								case 2:
									tile.WallType = (ushort)ModContent.WallType<DullPlatingWallWall>();
									break;
								case 3:
									tile.WallType = (ushort)ModContent.WallType<HologlassWallWall>();
									break;
							}
						}
					}
				}
			}
			if (type == 9)
			{
				int[,] _structure = {
				{0,0,1,1,1,1,1,1,1,0,0},
				{0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0},
				{1,1,1,1,1,2,1,1,1,1,1},
				{0,3,3,3,3,3,3,3,3,3,0},
				{0,0,3,3,3,3,3,3,3,0,0},
				{0,0,0,3,3,3,3,3,0,0,0},
				{0,0,0,0,3,3,3,0,0,0,0},
				{0,0,0,0,0,3,0,0,0,0,0}
				};
				int PosX = x - 5;  //spawnX and spawnY is where you want the anchor to be when this generates
				int PosY = y - 6;
				if (!Empty(PosX, PosY, _structure.GetLength(1), _structure.GetLength(0), 5))
				{
					return false;
				}
				//i = vertical, j = horizontal
				for (int confirmPlatforms = 0; confirmPlatforms < 2; confirmPlatforms++)    //Increase the iterations on this outermost for loop if tabletop-objects are not properly spawning
				{
					for (int i = 0; i < _structure.GetLength(0); i++)
					{
						for (int j = _structure.GetLength(1) - 1; j >= 0; j--)
						{
							int k = PosX + j;
							int l = PosY + i;
							if (WorldGen.InWorld(k, l, 30))
							{
								Tile tile = Framing.GetTileSafely(k, l);
								switch (_structure[i, j])
								{
									case 0:
										break;
									case 1:
										tile.HasTile = true;
										tile.TileType = (ushort)ModContent.TileType<AvaritianPlatingTile>();
										tile.Slope = 0;
										tile.IsHalfBlock = false;
										break;
									case 2:
										tile.HasTile = true;
										tile.TileType = (ushort)ModContent.TileType<AvaritianPlatingTile>();
										tile.Slope = 0;
										tile.IsHalfBlock = false;
										break;
									case 3:
										tile.HasTile = true;
										tile.TileType = (ushort)ModContent.TileType<DullPlatingTile>();
										tile.WallType = (ushort)ModContent.WallType<DullPlatingWallWall>();
										tile.Slope = 0;
										tile.IsHalfBlock = false;
										break;
								}
							}
						}
					}
				}
				int[,] _structure2 = {
				{0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,1,2,2,2,1,0,0,0},
				{0,0,0,1,2,3,2,1,0,0,0},
				{0,0,0,1,2,3,2,1,0,0,0},
				{0,0,0,1,2,3,2,1,0,0,0},
				{0,0,0,1,2,2,2,1,0,0,0},
				{0,0,0,0,0,2,2,0,0,0,0},
				{0,2,2,2,2,2,2,2,2,2,0},
				{0,0,2,2,2,2,2,2,2,0,0},
				{0,0,0,2,2,2,2,2,0,0,0},
				{0,0,0,0,2,2,2,0,0,0,0},
				{0,0,0,0,0,2,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0}
				};
				//i = vertical, j = horizontal
				for (int i = 0; i < _structure2.GetLength(0); i++)
				{
					for (int j = _structure2.GetLength(1) - 1; j >= 0; j--)
					{
						int k = PosX + j;
						int l = PosY + i;
						if (WorldGen.InWorld(k, l, 30))
						{
							Tile tile = Framing.GetTileSafely(k, l);
							switch (_structure2[i, j])
							{
								case 0:
									break;
								case 1:
									tile.WallType = (ushort)ModContent.WallType<PortalPlatingWallWall>();
									break;
								case 2:
									tile.WallType = (ushort)ModContent.WallType<DullPlatingWallWall>();
									break;
								case 3:
									tile.WallType = (ushort)ModContent.WallType<HologlassWallWall>();
									break;
							}
						}
					}
				}
			}

			return true;
		}
		public static bool GenerateBiomeChestIslands(int x, int y, int type, Mod mod, bool residual = false)
		{
			if (residual == true)
			{
				ushort firstUniqueTile = 0;
				ushort secondUniqueTile = 0;
				if (type == 0)
				{
					firstUniqueTile = TileID.CrimtaneBrick;
					secondUniqueTile = (ushort)ModContent.TileType<DullPlatingTile>();
				}
				if (type == 1)
				{
					firstUniqueTile = TileID.DemoniteBrick;
					secondUniqueTile = (ushort)ModContent.TileType<DullPlatingTile>();
				}
				if (type == 2)
				{
					firstUniqueTile = TileID.GoldBrick;
					secondUniqueTile = TileID.CobaltBrick;
				}
				if (type == 3)
				{
					firstUniqueTile = TileID.JungleGrass;
					secondUniqueTile = TileID.Mudstone;
				}
				if (type == 4)
				{
					firstUniqueTile = TileID.IceBrick;
					secondUniqueTile = TileID.SnowBrick;
				}
				if (type == 5)
				{
					firstUniqueTile = (ushort)ModContent.TileType<PyramidSlabTile>();
					secondUniqueTile = (ushort)ModContent.TileType<PyramidBrickTile>();
				}
				int[,] _structure = {
					{0,0,0,1,0,0,0,0,0,1,0,0,0},
					{2,2,3,3,3,2,2,2,3,3,3,2,2},
					{0,5,5,6,6,6,2,6,6,6,5,5,0},
					{0,0,5,5,6,6,2,6,6,5,5,0,0},
					{0,2,2,2,2,2,2,2,2,2,2,2,0},
					{0,0,0,5,5,6,2,6,5,5,0,0,0},
					{0,0,0,0,5,5,2,5,5,0,0,0,0},
					{0,0,0,0,0,5,2,5,0,0,0,0,0},
					{0,0,0,0,0,0,2,0,0,0,0,0,0},
					{0,0,0,0,0,0,2,0,0,0,0,0,0}
				};
				int PosX = x - 6;  //spawnX and spawnY is where you want the anchor to be when this generates
				int PosY = y - 1;
				if (!Empty(PosX, PosY, _structure.GetLength(1), _structure.GetLength(0), 5))
				{
					return false;
				}
				//i = vertical, j = horizontal
				for (int confirmPlatforms = 0; confirmPlatforms < 2; confirmPlatforms++)    //Increase the iterations on this outermost for loop if tabletop-objects are not properly spawning
				{
					for (int i = 0; i < _structure.GetLength(0); i++)
					{
						for (int j = _structure.GetLength(1) - 1; j >= 0; j--)
						{
							int k = PosX + j;
							int l = PosY + i;
							if (WorldGen.InWorld(k, l, 30))
							{
								Tile tile = Framing.GetTileSafely(k, l);
								switch (_structure[i, j])
								{
									case 0:
										if (confirmPlatforms == 0)
										{
											tile.HasTile = false;
											tile.IsHalfBlock = false;
											tile.Slope = 0;
										}
										break;
									case 1:
										if (confirmPlatforms == 0)
											tile.HasTile = false;
										WorldGen.PlaceTile(k, l, ModContent.TileType<SkyChainTile>(), true, true, -1, 0);
										tile.Slope = 0;
										tile.IsHalfBlock = false;
										break;
									case 2:
										tile.HasTile = true;
										tile.TileType = firstUniqueTile;
										tile.Slope = 0;
										tile.IsHalfBlock = false;
										break;
									case 3:
										tile.HasTile = true;
										tile.TileType = (ushort)ModContent.TileType<AvaritianPlatingTile>();
										tile.Slope = 0;
										tile.IsHalfBlock = false;
										break;
									case 5:
										tile.HasTile = true;
										tile.TileType = secondUniqueTile;
										tile.Slope = 0;
										tile.IsHalfBlock = false;
										break;
									case 6:
										tile.HasTile = true;
										tile.TileType = (ushort)ModContent.TileType<DullPlatingTile>();
										tile.Slope = 0;
										tile.IsHalfBlock = false;
										break;
								}
							}
						}
					}
				}
				return true;
			}
			if (type == 0)
			{
				int[,] _structure = {
				{0,0,0,1,1,1,1,1,1,1,1,0,0,0},
				{0,0,1,2,2,2,2,2,2,2,2,1,0,0},
				{0,0,1,2,1,1,1,1,1,1,2,1,0,0},
				{0,1,1,1,1,0,0,0,0,1,1,1,1,0},
				{0,0,1,0,0,0,0,0,0,0,0,1,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,1,4,0,0,0,3,0,0,0,0,4,1,0},
				{2,1,1,1,4,4,1,1,4,4,1,1,1,2},
				{2,2,2,2,1,1,1,1,1,1,2,2,2,2},
				{0,2,2,2,2,2,2,2,2,2,2,2,2,0},
				{0,0,0,2,2,2,2,2,2,2,2,0,0,0},
				{0,0,0,0,2,2,2,2,2,2,0,0,0,0},
				{0,0,0,0,0,2,2,2,2,0,0,0,0,0},
				{0,0,0,0,0,0,2,2,0,0,0,0,0,0},
				{0,0,0,0,0,0,2,2,0,0,0,0,0,0}
				};
				int PosX = x - 6;  //spawnX and spawnY is where you want the anchor to be when this generates
				int PosY = y - 10;

				if (!Empty(PosX, PosY, _structure.GetLength(1), _structure.GetLength(0), 5))
				{
					return false;
				}
				//i = vertical, j = horizontal
				for (int confirmPlatforms = 0; confirmPlatforms < 2; confirmPlatforms++)    //Increase the iterations on this outermost for loop if tabletop-objects are not properly spawning
				{
					for (int i = 0; i < _structure.GetLength(0); i++)
					{
						for (int j = _structure.GetLength(1) - 1; j >= 0; j--)
						{
							int k = PosX + j;
							int l = PosY + i;
							if (WorldGen.InWorld(k, l, 30))
							{
								Tile tile = Framing.GetTileSafely(k, l);
								switch (_structure[i, j])
								{
									case 0:
										if (confirmPlatforms == 0)
										{
											tile.HasTile = false;
											tile.IsHalfBlock = false;
											tile.Slope = 0;
										}
										break;
									case 1:
										tile.HasTile = true;
										tile.TileType = 347;
										tile.Slope = 0;
										tile.IsHalfBlock = false;
										break;
									case 2:
										tile.HasTile = true;
										tile.TileType = (ushort)ModContent.TileType<DullPlatingTile>();
										tile.Slope = 0;
										tile.IsHalfBlock = false;
										break;
									case 3:
										if (confirmPlatforms == 1)
										{
											tile.HasTile = false;
											tile.Slope = 0;
											tile.IsHalfBlock = false;
											WorldGen.PlaceTile(k, l, 21, true, true, -1, 25);
										}
										break;
									case 4:
										tile.HasTile = true;
										tile.TileType = 347;
										tile.Slope = 0;
										tile.IsHalfBlock = true;
										break;
								}
							}
						}
					}
				}
				_structure = new int[,] {
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,1,1,1,1,1,1,0,0,0,0},
				{0,0,0,2,1,1,1,1,1,1,2,0,0,0},
				{0,0,0,2,1,3,3,3,3,1,2,0,0,0},
				{0,0,0,2,1,3,3,3,3,1,2,0,0,0},
				{0,0,0,2,1,3,3,3,3,1,2,0,0,0},
				{0,0,0,2,1,3,3,3,3,1,2,0,0,0},
				{0,0,0,2,1,3,3,3,3,1,2,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0}
				};
				//i = vertical, j = horizontal
				for (int i = 0; i < _structure.GetLength(0); i++)
				{
					for (int j = _structure.GetLength(1) - 1; j >= 0; j--)
					{
						int k = PosX + j;
						int l = PosY + i;
						if (WorldGen.InWorld(k, l, 30))
						{
							Tile tile = Framing.GetTileSafely(k, l);
							switch (_structure[i, j])
							{
								case 0:
									tile.WallType = 0;
									break;
								case 1:
									tile.WallType = (ushort)ModContent.WallType<DullPlatingWallWall>();
									break;
								case 2:
									tile.WallType = 174;
									break;
								case 3:
									tile.WallType = 92;
									break;
							}
						}
					}
				}
			}
			if (type == 1)
			{
				int[,] _structure = {
					{0,0,0,1,1,1,1,1,1,1,1,0,0,0},
					{0,0,1,2,2,2,2,2,2,2,2,1,0,0},
					{0,0,1,2,1,1,1,1,1,1,2,1,0,0},
					{0,1,1,1,1,0,0,0,0,1,1,1,1,0},
					{0,0,1,0,0,0,0,0,0,0,0,1,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,1,4,0,0,0,3,0,0,0,0,4,1,0},
					{2,1,1,1,4,4,1,1,4,4,1,1,1,2},
					{2,2,2,2,1,1,1,1,1,1,2,2,2,2},
					{0,6,6,2,2,2,2,2,2,2,2,6,6,0},
					{0,0,0,6,6,6,6,6,6,6,6,0,0,0},
					{0,0,0,0,6,6,6,6,6,6,0,0,0,0},
					{0,0,0,0,0,6,6,6,6,0,0,0,0,0},
					{0,0,0,0,0,0,6,6,0,0,0,0,0,0},
					{0,0,0,0,0,0,6,6,0,0,0,0,0,0}
				};
				int PosX = x - 6;  //spawnX and spawnY is where you want the anchor to be when this generates
				int PosY = y - 10;
				if (!Empty(PosX, PosY, _structure.GetLength(1), _structure.GetLength(0), 5))
				{
					return false;
				}
				//i = vertical, j = horizontal
				for (int confirmPlatforms = 0; confirmPlatforms < 2; confirmPlatforms++)    //Increase the iterations on this outermost for loop if tabletop-objects are not properly spawning
				{
					for (int i = 0; i < _structure.GetLength(0); i++)
					{
						for (int j = _structure.GetLength(1) - 1; j >= 0; j--)
						{
							int k = PosX + j;
							int l = PosY + i;
							if (WorldGen.InWorld(k, l, 30))
							{
								Tile tile = Framing.GetTileSafely(k, l);
								switch (_structure[i, j])
								{
									case 0:
										if (confirmPlatforms == 0)
										{
											tile.HasTile = false;
											tile.IsHalfBlock = false;
											tile.Slope = 0;
										}
										break;
									case 1:
										tile.HasTile = true;
										tile.TileType = 140;
										tile.Slope = 0;
										tile.IsHalfBlock = false;
										break;
									case 2:
										tile.HasTile = true;
										tile.TileType = 152;
										tile.Slope = 0;
										tile.IsHalfBlock = false;
										break;
									case 3:
										if (confirmPlatforms == 1)
										{
											tile.HasTile = false;
											tile.Slope = 0;
											tile.IsHalfBlock = false;
											WorldGen.PlaceTile(k, l, 21, true, true, -1, 24);
										}
										break;
									case 4:
										tile.HasTile = true;
										tile.TileType = 140;
										tile.Slope = 0;
										tile.IsHalfBlock = true;
										break;
									case 6:
										tile.HasTile = true;
										tile.TileType = (ushort)ModContent.TileType<DullPlatingTile>();
										tile.Slope = 0;
										tile.IsHalfBlock = false;
										break;
								}
							}
						}
					}
				}
				_structure = new int[,] {
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,1,1,1,1,0,0,0,0,0},
					{0,0,0,2,1,1,1,1,1,1,2,0,0,0},
					{0,0,0,2,1,3,3,3,3,1,2,0,0,0},
					{0,0,0,2,1,3,3,3,3,1,2,0,0,0},
					{0,0,0,2,1,3,3,3,3,1,2,0,0,0},
					{0,0,0,2,1,3,3,3,3,1,2,0,0,0},
					{0,0,0,0,1,3,3,3,3,1,2,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0}
				};
				//i = vertical, j = horizontal
				for (int i = 0; i < _structure.GetLength(0); i++)
				{
					for (int j = _structure.GetLength(1) - 1; j >= 0; j--)
					{
						int k = PosX + j;
						int l = PosY + i;
						if (WorldGen.InWorld(k, l, 30))
						{
							Tile tile = Framing.GetTileSafely(k, l);
							switch (_structure[i, j])
							{
								case 0:
									tile.WallType = 0;
									break;
								case 1:
									tile.WallType = (ushort)ModContent.WallType<DullPlatingWallWall>();
									break;
								case 2:
									tile.WallType = 33;
									break;
								case 3:
									tile.WallType = 88;
									break;
							}
						}
					}
				}
			}
			if (type == 2)
			{
				int[,] _structure = {
					{0,0,0,1,1,1,1,1,1,1,1,0,0,0},
					{0,0,1,2,2,2,2,2,2,2,2,1,0,0},
					{0,0,1,2,1,1,1,1,1,1,2,1,0,0},
					{0,1,1,1,1,0,0,0,0,1,1,1,1,0},
					{0,0,1,0,0,0,0,0,0,0,0,1,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,1,4,0,0,0,3,0,0,0,0,4,1,0},
					{2,1,1,1,4,4,1,1,4,4,1,1,1,2},
					{2,2,2,2,1,1,1,1,1,1,2,2,2,2},
					{0,6,6,2,2,2,2,2,2,2,2,6,6,0},
					{0,0,0,7,7,7,6,7,7,7,7,0,0,0},
					{0,0,0,0,6,6,6,6,6,6,0,0,0,0},
					{0,0,0,0,0,7,6,7,7,0,0,0,0,0},
					{0,0,0,0,0,0,6,7,0,0,0,0,0,0},
					{0,0,0,0,0,0,6,7,0,0,0,0,0,0}
				};
				int PosX = x - 6;  //spawnX and spawnY is where you want the anchor to be when this generates
				int PosY = y - 10;
				if (!Empty(PosX, PosY, _structure.GetLength(1), _structure.GetLength(0), 5))
				{
					return false;
				}
				//i = vertical, j = horizontal
				for (int confirmPlatforms = 0; confirmPlatforms < 2; confirmPlatforms++)    //Increase the iterations on this outermost for loop if tabletop-objects are not properly spawning
				{
					for (int i = 0; i < _structure.GetLength(0); i++)
					{
						for (int j = _structure.GetLength(1) - 1; j >= 0; j--)
						{
							int k = PosX + j;
							int l = PosY + i;
							if (WorldGen.InWorld(k, l, 30))
							{
								Tile tile = Framing.GetTileSafely(k, l);
								switch (_structure[i, j])
								{
									case 0:
										if (confirmPlatforms == 0)
										{
											tile.HasTile = false;
											tile.IsHalfBlock = false;
											tile.Slope = 0;
										}
										break;
									case 1:
										tile.HasTile = true;
										tile.TileType = 45;
										tile.Slope = 0;
										tile.IsHalfBlock = false;
										break;
									case 2:
										tile.HasTile = true;
										tile.TileType = 121;
										tile.Slope = 0;
										tile.IsHalfBlock = false;
										break;
									case 3:
										if (confirmPlatforms == 1)
										{
											tile.HasTile = false;
											tile.Slope = 0;
											tile.IsHalfBlock = false;
											WorldGen.PlaceTile(k, l, 21, true, true, -1, 26);
										}
										break;
									case 4:
										tile.HasTile = true;
										tile.TileType = 45;
										tile.Slope = 0;
										tile.IsHalfBlock = true;
										break;
									case 6:
										tile.HasTile = true;
										tile.TileType = (ushort)ModContent.TileType<AvaritianPlatingTile>();
										tile.Slope = 0;
										tile.IsHalfBlock = false;
										break;
									case 7:
										tile.HasTile = true;
										tile.TileType = (ushort)ModContent.TileType<DullPlatingTile>();
										tile.Slope = 0;
										tile.IsHalfBlock = false;
										break;
								}
							}
						}
					}
				}
				_structure = new int[,] {
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,1,1,1,1,0,0,0,0,0},
					{0,0,0,2,1,1,1,1,1,1,2,0,0,0},
					{0,0,0,2,1,3,3,3,3,1,2,0,0,0},
					{0,0,0,2,1,3,4,4,3,1,2,0,0,0},
					{0,0,0,2,1,3,4,4,3,1,2,0,0,0},
					{0,0,0,2,1,3,4,4,3,1,2,0,0,0},
					{0,0,0,2,1,3,4,4,3,1,2,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0}
				};
				//i = vertical, j = horizontal
				for (int i = 0; i < _structure.GetLength(0); i++)
				{
					for (int j = _structure.GetLength(1) - 1; j >= 0; j--)
					{
						int k = PosX + j;
						int l = PosY + i;
						if (WorldGen.InWorld(k, l, 30))
						{
							Tile tile = Framing.GetTileSafely(k, l);
							switch (_structure[i, j])
							{
								case 0:
									tile.WallType = 0;
									break;
								case 1:
									tile.WallType = (ushort)ModContent.WallType<AvaritianPlatingWallWall>();
									break;
								case 2:
									tile.WallType = 10;
									break;
								case 3:
									tile.WallType = 89;
									break;
								case 4:
									tile.WallType = 93;
									break;
							}
						}
					}
				}
			}
			if (type == 3)
			{
				int[,] _structure = {
					{0,0,0,1,1,1,1,1,1,1,1,0,0,0},
					{0,0,1,1,2,2,2,2,2,2,1,1,0,0},
					{0,0,1,2,1,1,1,1,1,1,2,1,0,0},
					{0,1,1,1,1,0,0,3,0,1,1,1,1,0},
					{0,0,1,0,0,0,0,0,0,0,0,1,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,1,5,0,0,0,4,0,0,0,0,5,1,0},
					{2,1,1,1,5,5,1,1,5,5,1,1,1,2},
					{2,2,2,2,1,1,1,1,1,1,2,2,2,2},
					{0,7,7,2,2,2,2,2,2,2,2,7,7,0},
					{0,0,0,7,7,7,7,7,7,7,7,0,0,0},
					{0,0,0,0,7,7,7,7,7,7,0,0,0,0},
					{0,0,0,0,0,7,7,7,7,0,0,0,0,0},
					{0,0,0,0,0,0,7,7,0,0,0,0,0,0},
					{0,0,0,0,0,0,7,7,0,0,0,0,0,0}
				};
				int PosX = x - 6;  //spawnX and spawnY is where you want the anchor to be when this generates
				int PosY = y - 10;
				if (!Empty(PosX, PosY, _structure.GetLength(1), _structure.GetLength(0), 5))
				{
					return false;
				}
				//i = vertical, j = horizontal
				for (int confirmPlatforms = 0; confirmPlatforms < 2; confirmPlatforms++)    //Increase the iterations on this outermost for loop if tabletop-objects are not properly spawning
				{
					for (int i = 0; i < _structure.GetLength(0); i++)
					{
						for (int j = _structure.GetLength(1) - 1; j >= 0; j--)
						{
							int k = PosX + j;
							int l = PosY + i;
							if (WorldGen.InWorld(k, l, 30))
							{
								Tile tile = Framing.GetTileSafely(k, l);
								switch (_structure[i, j])
								{
									case 0:
										if (confirmPlatforms == 0)
										{
											tile.HasTile = false;
											tile.IsHalfBlock = false;
											tile.Slope = 0;
										}
										break;
									case 1:
										tile.HasTile = true;
										tile.TileType = 60;
										tile.Slope = 0;
										tile.IsHalfBlock = false;
										break;
									case 2:
										tile.HasTile = true;
										tile.TileType = 120;
										tile.Slope = 0;
										tile.IsHalfBlock = false;
										break;
									case 3:
										tile.HasTile = true;
										tile.TileType = 62;
										tile.Slope = 0;
										tile.IsHalfBlock = false;
										break;
									case 4:
										if (confirmPlatforms == 1)
										{
											tile.HasTile = false;
											tile.Slope = 0;
											tile.IsHalfBlock = false;
											WorldGen.PlaceTile(k, l, 21, true, true, -1, 23);
										}
										break;
									case 5:
										tile.HasTile = true;
										tile.TileType = 60;
										tile.Slope = 0;
										tile.IsHalfBlock = true;
										break;
									case 7:
										tile.HasTile = true;
										tile.TileType = (ushort)ModContent.TileType<DullPlatingTile>();
										tile.Slope = 0;
										tile.IsHalfBlock = false;
										break;
								}
							}
						}
					}
				}
				_structure = new int[,] {
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,1,1,1,1,1,0,0,0,0,0},
					{0,0,0,2,1,1,1,1,1,1,2,0,0,0},
					{0,0,0,2,1,3,3,3,3,1,2,0,0,0},
					{0,0,0,2,1,3,3,3,3,1,2,0,0,0},
					{0,0,0,2,1,3,3,3,3,1,2,0,0,0},
					{0,0,0,2,1,3,3,3,3,1,2,0,0,0},
					{0,0,0,2,1,3,3,3,3,1,2,0,0,0},
					{0,0,0,0,0,0,0,0,0,1,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0}
				};
				//i = vertical, j = horizontal
				for (int i = 0; i < _structure.GetLength(0); i++)
				{
					for (int j = _structure.GetLength(1) - 1; j >= 0; j--)
					{
						int k = PosX + j;
						int l = PosY + i;
						if (WorldGen.InWorld(k, l, 30))
						{
							Tile tile = Framing.GetTileSafely(k, l);
							switch (_structure[i, j])
							{
								case 0:
									tile.WallType = 0;
									break;
								case 1:
									tile.WallType = (ushort)ModContent.WallType<AvaritianPlatingWallWall>();
									break;
								case 2:
									tile.WallType = 67;
									break;
								case 3:
									tile.WallType = 91;
									break;
							}
						}
					}
				}

			}
			if (type == 4)
			{
				int[,] _structure = {
					{0,0,0,1,1,1,1,1,1,1,1,0,0,0},
					{0,0,1,2,2,2,2,2,2,2,2,1,0,0},
					{0,0,1,2,1,1,1,1,1,1,2,1,0,0},
					{0,1,1,1,1,0,0,0,0,1,1,1,1,0},
					{0,0,1,0,0,0,0,0,0,0,0,1,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,1,4,0,0,0,3,0,0,0,0,4,1,0},
					{2,1,1,1,4,4,1,1,4,4,1,1,1,2},
					{2,2,2,2,1,1,1,1,1,1,2,2,2,2},
					{0,6,6,2,2,2,2,2,2,2,2,6,6,0},
					{0,0,0,6,6,6,6,6,6,6,6,0,0,0},
					{0,0,0,0,6,6,6,6,6,6,0,0,0,0},
					{0,0,0,0,0,6,6,6,6,0,0,0,0,0},
					{0,0,0,0,0,0,6,6,0,0,0,0,0,0},
					{0,0,0,0,0,0,6,6,0,0,0,0,0,0}
				};
				int PosX = x - 6;  //spawnX and spawnY is where you want the anchor to be when this generates
				int PosY = y - 10;
				if (!Empty(PosX, PosY, _structure.GetLength(1), _structure.GetLength(0), 5))
				{
					return false;
				}
				//i = vertical, j = horizontal
				for (int confirmPlatforms = 0; confirmPlatforms < 2; confirmPlatforms++)    //Increase the iterations on this outermost for loop if tabletop-objects are not properly spawning
				{
					for (int i = 0; i < _structure.GetLength(0); i++)
					{
						for (int j = _structure.GetLength(1) - 1; j >= 0; j--)
						{
							int k = PosX + j;
							int l = PosY + i;
							if (WorldGen.InWorld(k, l, 30))
							{
								Tile tile = Framing.GetTileSafely(k, l);
								switch (_structure[i, j])
								{
									case 0:
										if (confirmPlatforms == 0)
										{
											tile.HasTile = false;
											tile.IsHalfBlock = false;
											tile.Slope = 0;
										}
										break;
									case 1:
										tile.HasTile = true;
										tile.TileType = 206;
										tile.Slope = 0;
										tile.IsHalfBlock = false;
										break;
									case 2:
										tile.HasTile = true;
										tile.TileType = 148;
										tile.Slope = 0;
										tile.IsHalfBlock = false;
										break;
									case 3:
										if (confirmPlatforms == 1)
										{
											tile.HasTile = false;
											tile.Slope = 0;
											tile.IsHalfBlock = false;
											WorldGen.PlaceTile(k, l, 21, true, true, -1, 27);
										}
										break;
									case 4:
										tile.HasTile = true;
										tile.TileType = 206;
										tile.Slope = 0;
										tile.IsHalfBlock = true;
										break;
									case 6:
										tile.HasTile = true;
										tile.TileType = (ushort)ModContent.TileType<DullPlatingTile>();
										tile.Slope = 0;
										tile.IsHalfBlock = false;
										break;
								}
							}
						}
					}
				}
				_structure = new int[,] {
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,1,1,1,1,1,1,0,0,0,0},
					{0,0,0,2,1,1,1,1,1,1,2,0,0,0},
					{0,0,0,2,1,3,3,3,3,1,2,0,0,0},
					{0,0,0,2,1,3,3,3,3,1,2,0,0,0},
					{0,0,0,2,1,3,3,3,3,1,2,0,0,0},
					{0,0,0,2,1,3,3,3,3,1,2,0,0,0},
					{0,0,0,2,1,3,3,3,3,1,2,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0}
				};
				//i = vertical, j = horizontal
				for (int i = 0; i < _structure.GetLength(0); i++)
				{
					for (int j = _structure.GetLength(1) - 1; j >= 0; j--)
					{
						int k = PosX + j;
						int l = PosY + i;
						if (WorldGen.InWorld(k, l, 30))
						{
							Tile tile = Framing.GetTileSafely(k, l);
							switch (_structure[i, j])
							{
								case 0:
									tile.WallType = 0;
									break;
								case 1:
									tile.WallType = (ushort)ModContent.WallType<AvaritianPlatingWallWall>();
									break;
								case 2:
									tile.WallType = 84;
									break;
								case 3:
									tile.WallType = 90;
									break;
							}
						}
					}
				}
			}
			if (type == 5)
			{
				int[,] _structure = {
					{0,0,0,1,1,1,1,1,1,1,1,0,0,0},
					{0,0,1,2,2,2,2,2,2,2,2,1,0,0},
					{0,0,1,2,1,1,1,1,1,1,2,1,0,0},
					{0,1,1,1,1,0,0,0,0,1,1,1,1,0},
					{0,0,1,0,0,0,0,0,0,0,0,1,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,1,4,0,0,0,3,0,0,0,0,4,1,0},
					{2,1,1,1,4,4,1,1,4,4,1,1,1,2},
					{6,6,6,6,6,6,6,6,6,6,6,6,6,6},
					{0,2,2,2,2,2,6,6,2,2,2,2,2,0},
					{0,0,0,2,2,2,6,6,2,2,2,0,0,0},
					{0,0,0,0,2,2,6,6,2,2,0,0,0,0},
					{0,0,0,0,0,2,6,6,2,0,0,0,0,0},
					{0,0,0,0,0,0,6,6,0,0,0,0,0,0},
					{0,0,0,0,0,0,6,6,0,0,0,0,0,0}
				};
				int PosX = x - 6;  //spawnX and spawnY is where you want the anchor to be when this generates
				int PosY = y - 10;
				if (!Empty(PosX, PosY, _structure.GetLength(1), _structure.GetLength(0), 5))
				{
					return false;
				}
				//i = vertical, j = horizontal
				for (int confirmPlatforms = 0; confirmPlatforms < 2; confirmPlatforms++)    //Increase the iterations on this outermost for loop if tabletop-objects are not properly spawning
				{
					for (int i = 0; i < _structure.GetLength(0); i++)
					{
						for (int j = _structure.GetLength(1) - 1; j >= 0; j--)
						{
							int k = PosX + j;
							int l = PosY + i;
							if (WorldGen.InWorld(k, l, 30))
							{
								Tile tile = Framing.GetTileSafely(k, l);
								switch (_structure[i, j])
								{
									case 0:
										if (confirmPlatforms == 0)
										{
											tile.HasTile = false;
											tile.IsHalfBlock = false;
											tile.Slope = 0;
										}
										break;
									case 1:
										tile.HasTile = true;
										tile.TileType = (ushort)ModContent.TileType<PyramidSlabTile>();
										tile.Slope = 0;
										tile.IsHalfBlock = false;
										break;
									case 2:
										tile.HasTile = true;
										tile.TileType = (ushort)ModContent.TileType<PyramidBrickTile>();
										tile.Slope = 0;
										tile.IsHalfBlock = false;
										break;
									case 3:
										if (confirmPlatforms == 1)
										{
											tile.HasTile = false;
											tile.Slope = 0;
											tile.IsHalfBlock = false;
											WorldGen.PlaceTile(k, l, TileID.Containers2, true, true, -1, 13);
										}
										break;
									case 4:
										tile.HasTile = true;
										tile.TileType = (ushort)ModContent.TileType<PyramidSlabTile>();
										tile.Slope = 0;
										tile.IsHalfBlock = true;
										break;
									case 6:
										tile.HasTile = true;
										tile.TileType = (ushort)ModContent.TileType<DullPlatingTile>();
										tile.Slope = 0;
										tile.IsHalfBlock = false;
										break;
								}
							}
						}
					}
				}
				_structure = new int[,] {
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,1,1,1,1,1,1,0,0,0,0},
					{0,0,0,2,1,1,1,1,1,1,2,0,0,0},
					{0,0,0,2,1,3,3,3,3,1,2,0,0,0},
					{0,0,0,2,1,3,3,3,3,1,2,0,0,0},
					{0,0,0,2,1,3,3,3,3,1,2,0,0,0},
					{0,0,0,2,1,3,3,3,3,1,2,0,0,0},
					{0,0,0,2,1,3,3,3,3,1,2,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0}
				};
				//i = vertical, j = horizontal
				for (int i = 0; i < _structure.GetLength(0); i++)
				{
					for (int j = _structure.GetLength(1) - 1; j >= 0; j--)
					{
						int k = PosX + j;
						int l = PosY + i;
						if (WorldGen.InWorld(k, l, 30))
						{
							Tile tile = Framing.GetTileSafely(k, l);
							switch (_structure[i, j])
							{
								case 0:
									tile.WallType = 0;
									break;
								case 1:
									tile.WallType = (ushort)ModContent.WallType<AvaritianPlatingWallWall>();
									break;
								case 2:
									tile.WallType = (ushort)ModContent.WallType<PyramidBrickWallWall>();
									break;
								case 3:
									tile.WallType = WallID.YellowStainedGlass;
									break;
							}
						}
					}
				}
			}
			if (!residual)
			{
				int direction = Main.rand.Next(2) * 2 - 1;
				int directionV = Main.rand.Next(2) * 2 - 1;
				Vector2 tileLocation = new Vector2(x, y);
				for (int r = 0; r < 4; r++)
				{
					if (r == 1)
					{
						direction *= -1;
						directionV *= -1;
					}
					tileLocation = new Vector2(x, y);
					tileLocation.X += direction * (10 + Main.rand.Next(45));
					tileLocation.Y += directionV * Main.rand.Next(80);

					int extend = 0;
					while (!GenerateBiomeChestIslands((int)tileLocation.X, (int)tileLocation.Y, type, mod, true))
					{
						tileLocation = new Vector2(x, y);
						tileLocation.X += direction * (10 + Main.rand.Next(45 + extend));
						tileLocation.Y += directionV * (Main.rand.Next(80));
						extend += 2;
					}
				}
			}
			return true;
		}
		public static bool SkytileValid(Tile tile, Mod mod)
		{
			return tile.HasTile && (tile.TileType == (ushort)ModContent.TileType<DullPlatingTile>() || tile.TileType == (ushort)ModContent.TileType<AvaritianPlatingTile>());
		}
		public static void DistributeSkyThings(Mod mod, int maxChests = 30, int maxDisplays = 7, int maxPotGens = 5, int maxFabricators = 3, int ratePots = 5, int rateDecor = 45)
		{
			int next = 0;
			int totalChests = 0;
			int totalDisplays = 0;
			int totalPotGens = 0;
			int totalFabricators = 0;
			for (int i = 20; i < Main.maxTilesX - 20; i++)
			{
				for (int j = Main.maxTilesY - 20; j > 20; j--)
				{
					Tile tile = Framing.GetTileSafely(i, j);
					Tile tile2 = Framing.GetTileSafely(i + 1, j);
					Tile tile3 = Framing.GetTileSafely(i + 2, j);
					if (SkytileValid(tile, mod) && WorldGen.InWorld(i, j, 20))
					{
						if (Main.rand.NextBool(ratePots)&& Empty(i, j - 2, 2, 2) && SkytileValid(tile2, mod))
						{
							WorldGen.PlaceTile(i, j - 1, (ushort)ModContent.TileType<SkyPots>(), true, true, -1, Main.rand.Next(9)); //pots
						}
						else if (Main.rand.NextBool(rateDecor)&& Empty(i - 1, j - 2, 3, 2))
						{
							tile2 = Framing.GetTileSafely(i - 2, j);
							tile3 = Framing.GetTileSafely(i + 2, j);
							WorldGen.PlaceTile(i, j - 1, (ushort)ModContent.TileType<HardlightTableTile>(), true, true, -1, 0);
							if (Main.rand.NextBool(2) && SkytileValid(tile2, mod) && Empty(i - 2, j - 2, 1, 2))
							{
								WorldGen.PlaceTile(i - 2, j - 1, (ushort)ModContent.TileType<HardlightChairTile>(), true, true, -1, 1);
							}
							if (Main.rand.NextBool(2) && SkytileValid(tile2, mod) && Empty(i + 2, j - 2, 1, 2))
							{
								WorldGen.PlaceTile(i + 2, j - 1, (ushort)ModContent.TileType<HardlightChairTile>(), true, true, -1, 0);
							}
						}
					}
				}
			}
			while (totalChests < maxChests)
			{
				int i = Main.rand.Next(15, Main.maxTilesX - 15);
				int j = Main.rand.Next(15, Main.maxTilesY - 15);
				Tile tile = Framing.GetTileSafely(i, j);
				Tile tile2 = Framing.GetTileSafely(i + 1, j);
				Tile tile3 = Framing.GetTileSafely(i + 2, j);
				if (SkytileValid(tile, mod) && WorldGen.InWorld(i, j, 20))
				{
					if (Empty(i, j - 2, 2, 2) && SkytileValid(tile2, mod))
					{
						if (next % 3 == 0)
						{
							WorldGen.PlaceChest(i, j - 1, (ushort)ModContent.TileType<LockedSkywareChest>(), style: 1);
							tile.TileType = TileID.Sunplate;
							tile2.TileType = TileID.Sunplate;
						}
						if (next % 3 == 1)
						{
							WorldGen.PlaceChest(i, j - 1, (ushort)ModContent.TileType<LockedMeteoriteChest>(), style: 1);
							tile.TileType = TileID.MeteoriteBrick;
							tile2.TileType = TileID.MeteoriteBrick;
						}
						if (next % 3 == 2)
						{
							WorldGen.PlaceChest(i, j - 1, (ushort)ModContent.TileType<LockedStrangeChest>(), style: 1);
							tile.TileType = (ushort)ModContent.TileType<AvaritianPlatingTile>();
							tile2.TileType = (ushort)ModContent.TileType<AvaritianPlatingTile>();
						}
						totalChests++;
						next++;
					}
				}
			}
			while (totalDisplays < maxDisplays)
			{
				int i = Main.rand.Next(15, Main.maxTilesX - 15);
				int j = Main.rand.Next(15, Main.maxTilesY - 15);
				Tile tile = Framing.GetTileSafely(i, j);
				Tile tile2 = Framing.GetTileSafely(i + 1, j);
				Tile tile3 = Framing.GetTileSafely(i - 1, j);
				if (SkytileValid(tile, mod) && WorldGen.InWorld(i, j, 20))
				{
					if (SkytileValid(tile2, mod) && SkytileValid(tile3, mod) && Empty(i - 1, j - 3, 3, 2))
					{
						WorldGen.PlaceTile(i, j - 1, (ushort)ModContent.TileType<DigitalDisplayTile>(), true, true, -1, Main.rand.Next(3));
						totalDisplays++;
					}
				}
			}
			while (totalFabricators < maxFabricators)
			{
				int i = Main.rand.Next(15, Main.maxTilesX - 15);
				int j = Main.rand.Next(15, Main.maxTilesY - 15);
				Tile tile = Framing.GetTileSafely(i, j);
				Tile tile2 = Framing.GetTileSafely(i + 1, j);
				Tile tile3 = Framing.GetTileSafely(i - 1, j);
				if (SkytileValid(tile, mod) && WorldGen.InWorld(i, j, 20))
				{
					if (SkytileValid(tile2, mod) && SkytileValid(tile3, mod) && Empty(i - 1, j - 3, 3, 2))
					{
						WorldGen.PlaceTile(i, j - 1, (ushort)ModContent.TileType<HardlightFabricatorTile>(), true, true, -1, 0);
						totalFabricators++;
					}
				}
			}
			while (totalPotGens < maxPotGens)
			{
				int i = Main.rand.Next(15, Main.maxTilesX - 15);
				int j = Main.rand.Next(15, Main.maxTilesY - 15);
				Tile tile = Framing.GetTileSafely(i, j);
				Tile tile2 = Framing.GetTileSafely(i + 1, j);
				Tile tile3 = Framing.GetTileSafely(i, j + 1);
				Tile tile4 = Framing.GetTileSafely(i + 1, j + 1);
				if (SkytileValid(tile, mod))
				{
					if (SkytileValid(tile2, mod) && SkytileValid(tile3, mod) && SkytileValid(tile4, mod) && Empty(i, j - 2, 2, 2))
					{
						tile.HasTile = false;
						tile2.HasTile = false;
						WorldGen.PlaceTile(i, j, (ushort)ModContent.TileType<PotGeneratorTile>(), true, true, -1, 0);
						ModTileEntity.PlaceEntityNet(i, j, ModContent.TileEntityType<PotTimer>());
						tile.WallType = (ushort)ModContent.WallType<DullPlatingWallWall>();
						tile2.WallType = (ushort)ModContent.WallType<DullPlatingWallWall>();
						totalPotGens++;
					}
				}
			}
		}
		public static bool GeneratePlanetariumFull(Mod mod, int i, int j, bool force = false)
		{
			Vector2 tileLocation = new Vector2(i, j);
			if (!SOTSWorldgenHelper.GenerateSkyArtifact((int)tileLocation.X, (int)tileLocation.Y, mod, force))
			{
				return false;
			}
			for (int r = 0; r < 30; r++)
			{
				tileLocation = new Vector2(i, j);
				if (Main.rand.NextBool(2))
				{
					tileLocation.X += Main.rand.Next(300);
				}
				else
				{
					tileLocation.X -= Main.rand.Next(300);
				}

				if (Main.rand.NextBool(2))
				{
					tileLocation.Y += Main.rand.Next(50);
				}
				else
				{
					tileLocation.Y -= Main.rand.Next(36) + 50;
				}

				int extend = 0;
				while (!SOTSWorldgenHelper.GenerateArtifactIslands((int)tileLocation.X, (int)tileLocation.Y, r % 10, mod))
				{
					tileLocation = new Vector2(i, j);
					if (Main.rand.NextBool(2))
					{
						tileLocation.X += Main.rand.Next(300 + extend);
					}
					else
					{
						tileLocation.X -= Main.rand.Next(300 + extend);
					}

					if (Main.rand.NextBool(2))
					{
						tileLocation.Y += Main.rand.Next(50);
					}
					else
					{
						tileLocation.Y -= Main.rand.Next(36) + 50;
					}

					extend++;
				}
			}
			int direction = Main.rand.Next(2) * 2 - 1;
			for (int r = 0; r < 2; r++)
			{
				int type = 2;
				if (r == 1)
				{
					direction *= -1;
					type = 4;
				}
				tileLocation = new Vector2(i, j);
				tileLocation.X += direction * (150 + Main.rand.Next(240));
				tileLocation.Y += Main.rand.Next(50);

				int extend = 0;
				while (!GenerateBiomeChestIslands((int)tileLocation.X, (int)tileLocation.Y, type, mod))
				{
					tileLocation = new Vector2(i, j);
					tileLocation.X += direction * (150 + Main.rand.Next(240));
					tileLocation.Y += Main.rand.Next(50);
					extend++;
				}
			}
			SOTSWorldgenHelper.DistributeSkyThings(mod, 30, 7, 10, 4, 5, 45);
			return true;
		}
		public static void GenerateCoconutIsland(Mod mod, int x, int y, int direction = 1)
		{
			if (direction != 1 && direction != -1)
			{
				return;
			}
			int[,] _structure = {
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,2,2,2,2,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,2,2,2,2,2,4,0,0,5,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,2,2,2,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,3,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,3,2,2,2,7,2,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,6,0,0,2,2,2,7,11,11,2,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,6,0,12,12,12,12,12,12,2,2,7,11,11,11,11,11,11,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0},
				{0,0,12,12,12,12,12,12,12,12,12,12,2,11,7,7,11,11,11,11,11,11,14,0,9,0,0,0,0,0,0,0,0,0,12,12,12,12,12,0,6,0,0,0,0},
				{15,12,12,12,12,12,12,12,12,12,12,2,2,11,11,7,11,7,11,11,11,11,11,11,11,11,11,13,0,0,0,0,12,12,12,12,12,12,12,12,12,12,0,0,15},
				{15,15,12,12,12,12,12,12,12,12,2,2,2,2,2,11,11,7,7,7,11,11,16,11,11,11,11,11,11,11,7,7,12,12,12,12,12,12,12,12,17,17,17,17,15},
				{0,15,17,12,12,12,12,12,2,2,2,2,2,2,2,2,11,7,7,11,7,11,11,11,11,11,7,7,7,7,7,12,12,12,12,12,12,12,17,17,17,15,15,15,19},
				{0,15,15,17,17,12,12,12,12,12,12,2,2,2,7,7,7,7,11,7,7,11,11,11,7,7,7,7,12,12,12,12,12,12,12,12,17,17,17,17,15,15,19,0,0},
				{0,0,15,15,17,17,17,12,12,12,2,2,2,2,2,2,2,7,7,7,7,11,11,11,7,7,7,12,12,12,12,12,12,12,12,17,17,17,17,15,15,19,0,0,0},
				{0,0,0,15,15,15,17,17,12,12,12,12,12,2,2,2,2,7,2,7,11,11,11,7,7,12,12,12,12,12,12,12,12,12,17,17,17,15,15,15,0,0,0,0,0},
				{0,0,0,0,0,15,15,15,17,12,12,12,12,12,12,2,2,7,2,7,11,11,7,7,12,12,12,12,12,12,12,12,12,17,17,15,15,15,0,0,0,0,0,0,0},
				{0,0,0,0,0,20,15,15,15,17,12,12,12,2,2,2,2,2,2,7,11,7,7,12,12,12,12,12,12,12,12,12,17,17,15,15,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,15,15,15,17,12,12,12,12,2,2,2,2,7,2,7,2,12,12,12,12,12,12,12,12,12,17,15,15,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,20,15,17,17,17,17,12,12,12,2,2,2,2,7,2,2,12,12,12,12,12,12,17,17,15,15,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,15,15,17,17,17,17,17,12,12,12,12,2,2,2,2,12,12,12,12,12,17,15,15,15,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,15,15,15,15,17,17,17,17,17,2,2,2,2,2,2,12,15,17,17,15,15,15,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,20,15,15,15,15,17,17,2,2,2,2,2,2,15,15,15,15,15,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,15,15,17,17,17,15,2,2,2,2,2,15,15,0,0,0,0,21,0,3,2,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,15,17,10,10,2,2,2,2,2,2,8,0,0,1,2,2,2,2,4,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,15,22,10,2,2,2,2,2,2,2,1,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,2,2,2,2,23,23,2,2,2,2,2,2,2,2,2,2,2,2,2,4,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,4,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,2,2,2,2,2,12,17,2,2,2,2,2,2,4,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,12,17,15,15,0,5,2,2,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,2,2,12,12,17,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,12,17,17,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,12,17,15,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,2,12,17,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,17,15,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,17,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,17,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,17,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
			};
			int PosX = x - 22 * direction; //spawnX and spawnY is where you want the anchor to be when this generates
			int PosY = y - 14;
			//i = vertical, j = horizontal
			for (int confirmPlatforms = 0; confirmPlatforms < 2; confirmPlatforms++)    //Increase the iterations on this outermost for loop if tabletop-objects are not properly spawning
			{
				for (int i = 0; i < _structure.GetLength(0); i++)
				{
					for (int j = _structure.GetLength(1) - 1; j >= 0; j--)
					{
						int k = PosX + j * direction;
						int l = PosY + i;
						if (WorldGen.InWorld(k, l, 30))
						{
							Tile tile = Framing.GetTileSafely(k, l);
							switch (_structure[i, j])
							{
								case 0:
									break;
								case 1:
									tile.HasTile = true;
									tile.TileType = 1;
									tile.Slope = 0;
									tile.IsHalfBlock = true;
									tile.WallType = (ushort)WallID.Stone;
									break;
								case 2:
									tile.HasTile = true;
									tile.TileType = 1;
									tile.Slope = 0;
									tile.IsHalfBlock = false;
									tile.WallType = (ushort)WallID.Stone;
									break;
								case 3:
									tile.HasTile = true;
									tile.TileType = 1;
									tile.Slope = (SlopeType)(direction == 1 ? 2 : 1);
									tile.IsHalfBlock = false;
									tile.WallType = (ushort)WallID.Stone;
									break;
								case 4:
									tile.HasTile = true;
									tile.TileType = 1;
									tile.Slope = (SlopeType)(direction == 1 ? 3 : 4);
									tile.IsHalfBlock = false;
									tile.WallType = (ushort)WallID.Stone;
									break;
								case 5:
									tile.HasTile = true;
									tile.TileType = 1;
									tile.Slope = (SlopeType)(direction == 1 ? 4 : 3);
									tile.IsHalfBlock = false;
									tile.WallType = (ushort)WallID.Stone;
									break;
								case 6:
									if (confirmPlatforms == 1)
									{
										tile.HasTile = false;
										tile.Slope = 0;
										tile.IsHalfBlock = false;
										WorldGen.PlaceTile(k, l, 20, true, true, -1, 18);
										WorldGen.GrowPalmTree(k, l);
									}
									break;
								case 7:
									tile.HasTile = true;
									tile.TileType = (ushort)ModContent.TileType<PyramidSlabTile>();
									tile.Slope = 0;
									tile.IsHalfBlock = false;
									tile.WallType = (ushort)WallID.SandstoneBrick;
									break;
								case 8:
									tile.HasTile = true;
									tile.TileType = 1;
									tile.Slope = (SlopeType)(direction == 1 ? 1 : 2);
									tile.IsHalfBlock = false;
									break;
								case 9:
									if (confirmPlatforms == 1)
									{
										tile.HasTile = false;
										tile.Slope = 0;
										tile.IsHalfBlock = false;
										WorldGen.PlaceTile(k, l, (ushort)ModContent.TileType<StrangeKeystoneTile>(), true, true, -1, 0);
									}
									break;
								case 10:
									tile.WallType = (ushort)WallID.SandstoneBrick;
									break;
								case 11:
									tile.HasTile = true;
									tile.TileType = (ushort)ModContent.TileType<OvergrownPyramidTileSafe>();
									tile.Slope = 0;
									tile.IsHalfBlock = false;
									tile.WallType = (ushort)WallID.GrassUnsafe;
									break;
								case 12:
									tile.HasTile = true;
									tile.TileType = 53;
									tile.Slope = 0;
									tile.IsHalfBlock = false;
									tile.WallType = (ushort)WallID.Sandstone;
									break;
								case 13:
									tile.HasTile = true;
									tile.TileType = (ushort)ModContent.TileType<OvergrownPyramidTileSafe>();
									tile.Slope = 0;
									tile.IsHalfBlock = true;
									tile.WallType = (ushort)WallID.GrassUnsafe;
									break;
								case 14:
									tile.HasTile = true;
									tile.TileType = (ushort)ModContent.TileType<OvergrownPyramidTileSafe>();
									tile.Slope = (SlopeType)(direction == 1 ? 1 : 2);
									tile.IsHalfBlock = false;
									tile.WallType = (ushort)WallID.GrassUnsafe;
									break;
								case 15:
									tile.HasTile = true;
									tile.TileType = 396;
									tile.Slope = 0;
									tile.IsHalfBlock = false;
									tile.WallType = (ushort)WallID.Sandstone;
									break;
								case 16:
									tile.HasTile = true;
									tile.TileType = (ushort)ModContent.TileType<OvergrownPyramidTileSafe>();
									tile.Slope = 0;
									tile.IsHalfBlock = false;
									tile.WallType = (ushort)WallID.GrassUnsafe;
									break;
								case 17:
									tile.HasTile = true;
									tile.TileType = 397;
									tile.Slope = 0;
									tile.IsHalfBlock = false;
									tile.WallType = (ushort)WallID.Sandstone;
									break;
								case 19:
									tile.HasTile = true;
									tile.TileType = 396;
									tile.Slope = (SlopeType)(direction == 1 ? 3 : 4);
									tile.IsHalfBlock = false;
									tile.WallType = (ushort)WallID.Sandstone;
									break;
								case 20:
									tile.HasTile = true;
									tile.TileType = 396;
									tile.Slope = (SlopeType)(direction == 1 ? 4 : 3);
									tile.IsHalfBlock = false;
									tile.WallType = (ushort)WallID.Sandstone;
									break;
								case 21:
									if (confirmPlatforms == 1)
									{
										tile.HasTile = false;
										tile.Slope = 0;
										tile.IsHalfBlock = false;
										WorldGen.PlaceTile(k - (direction != 1 ? 1 : 0), l, 376, true, true, -1, 0);
									}
									break;
								case 22:
									if (confirmPlatforms == 1)
									{
										tile.HasTile = false;
										tile.Slope = 0;
										tile.IsHalfBlock = false;
										WorldGen.PlaceTile(k - (direction != 1 ? 1 : 0), l, ModContent.TileType<RuinedChestTile>(), true, true, -1, 1);
										tile.WallType = (ushort)WallID.SandstoneBrick;
									}
									break;
								case 23:
									tile.HasTile = true;
									tile.TileType = (ushort)ModContent.TileType<PyramidBrickTile>();
									tile.Slope = 0;
									tile.IsHalfBlock = false;
									break;
							}
						}
					}
				}
			}
		}
		public static void FindAndGenerateDamocles(int dungeonSide)
		{
			int third = Main.maxTilesX / 3;
			for (int j = Main.maxTilesY - 200; j > 0; j--)
			{
				int i = 100;
				if (dungeonSide == 1)
				{
					i = Main.maxTilesX - 100;
				}
				bool contin = true;
				bool properGenerate = false;
				int color = 0;
				while (contin)
				{
					if (dungeonSide == 1)
					{
						i--;
						if (i < Main.maxTilesX - third)
						{
							contin = false;
						}
					}
					else
					{
						i++;
						if (i > third)
						{
							contin = false;
						}
					}
					Tile tile = Main.tile[i, j];
					if (Main.tileDungeon[tile.TileType])
					{
						i += dungeonSide * -16;
						if (tile.TileType == TileID.GreenDungeonBrick)
							color = 1;
						else if (tile.TileType == TileID.BlueDungeonBrick)
							color = 2;
						properGenerate = true;
						break;
					}
				}
				if (properGenerate)
				{
					SOTSWorldgenHelper.GenerateDamocles(i, j, color);
					break;
				}
			}
		}
		public static void GenerateDamocles(int spawnX, int spawnY, int type)
		{
			for (int j = 1; j < 30; j++)
			{
				int counter = 0;
				for (int i = -1; i <= 1; i++)
				{
					int tunnel = spawnX + i;
					int tunnelY = spawnY - j;
					Tile tile = Framing.GetTileSafely(tunnel, tunnelY);
					Tile tileAbove = Framing.GetTileSafely(tunnel, tunnelY - 1);
					if ((Main.tileDungeon[tile.TileType] || TileID.Spikes == tile.TileType) && tile.HasTile)
					{
						if (Main.tileSolid[tileAbove.TileType] && !Main.tileSolidTop[tileAbove.TileType] && tileAbove.HasTile)
							tile.HasTile = false;
						else
						{
							tile.HasTile = false;
							int style = 7;
							if (tile.TileType == TileID.GreenDungeonBrick)
								style = 8;
							if (tile.TileType == TileID.BlueDungeonBrick)
								style = 6;
							WorldGen.PlaceTile(tunnel, tunnelY, TileID.Platforms, true, true, -1, style);
						}
						counter++;
					}
				}
				if (counter == 0)
				{
					break;
				}
			}
			int WallType1 = WallID.PinkDungeonUnsafe;
			int WallType2 = WallID.PinkDungeonTileUnsafe;
			int WallType3 = WallID.PurpleStainedGlass;
			int TileType1 = TileID.PinkDungeonBrick;
			int PlatformStyle = 7;
			if (type == 1)
			{
				WallType1 = WallID.GreenDungeonUnsafe;
				WallType2 = WallID.GreenDungeonTileUnsafe;
				WallType3 = WallID.GreenStainedGlass;
				TileType1 = TileID.GreenDungeonBrick;
				PlatformStyle = 8;
			}
			if (type == 2)
			{
				WallType1 = WallID.BlueDungeonUnsafe;
				WallType2 = WallID.BlueDungeonTileUnsafe;
				WallType3 = WallID.BlueStainedGlass;
				TileType1 = TileID.BlueDungeonBrick;
				PlatformStyle = 6;
			}
			int[,] _structure = {
				{0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0},
				{0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0},
				{0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0},
				{0,2,2,2,2,2,2,4,4,4,4,4,2,2,5,3,3,3,3,5,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0},
				{0,2,2,4,4,4,4,4,4,4,4,4,2,2,5,3,3,3,3,5,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0},
				{0,2,2,4,5,2,2,2,4,4,4,2,2,2,5,3,3,3,3,5,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0},
				{0,2,2,4,5,2,2,4,4,4,4,4,2,2,5,3,3,3,3,5,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0},
				{0,2,2,4,5,2,2,4,6,6,6,4,2,2,5,3,3,3,3,5,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0},
				{0,2,2,4,5,2,2,6,6,6,6,6,2,2,5,3,3,3,3,5,2,4,7,4,7,7,2,2,2,2,2,2,2,2,2,2,2,2,2,0},
				{0,2,2,4,5,2,2,6,6,6,6,6,2,2,5,3,3,3,3,5,4,4,7,4,4,7,7,2,2,2,2,2,2,2,2,2,2,2,2,0},
				{0,2,2,4,5,2,2,6,6,6,6,6,2,2,5,3,3,3,3,5,7,7,7,7,7,4,7,5,5,5,5,5,5,5,5,2,2,2,2,0},
				{0,2,2,4,5,2,2,6,6,6,6,6,2,2,5,3,3,3,3,5,4,4,7,4,4,4,7,5,3,3,3,3,3,3,2,2,2,2,2,0},
				{0,2,2,4,5,2,2,6,6,6,6,6,2,2,5,3,3,3,3,5,7,4,7,4,4,4,7,5,3,5,5,5,5,5,5,2,2,2,2,0},
				{0,2,2,4,5,2,2,4,6,6,6,4,2,2,5,3,3,3,3,5,7,7,4,4,4,7,7,5,3,5,2,2,2,2,2,2,2,2,2,0},
				{0,2,2,4,5,2,2,4,4,4,4,4,2,2,5,3,3,3,3,5,2,7,7,7,7,7,5,5,3,5,2,2,2,2,2,2,2,2,2,0},
				{0,2,2,4,5,5,5,4,4,4,4,4,5,5,5,3,3,3,3,5,5,5,4,4,4,5,5,5,3,5,2,2,2,2,2,2,2,2,2,0},
				{0,2,2,4,3,3,3,4,4,4,4,4,3,3,3,3,3,3,3,3,3,3,4,4,4,3,3,3,3,5,2,2,2,2,2,2,2,2,2,0},
				{0,2,2,4,4,4,4,4,4,4,4,4,2,2,2,3,3,3,3,5,5,5,5,5,5,5,5,5,5,5,2,2,2,2,2,2,2,2,2,0},
				{0,2,2,2,2,2,2,4,4,4,4,4,2,2,2,3,3,3,3,2,2,2,4,4,4,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0},
				{0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,2,2,2,4,4,4,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0},
				{0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,2,2,2,4,4,4,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0},
				{0,2,2,2,2,2,2,2,2,2,2,2,2,4,4,4,4,2,2,2,2,2,4,4,4,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0},
				{0,2,2,2,2,2,2,2,2,2,2,2,2,4,4,4,4,4,4,4,4,4,4,4,4,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0},
				{0,2,2,2,2,2,2,2,2,2,2,2,2,4,4,4,4,4,4,4,4,4,4,4,4,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0},
				{0,2,2,2,2,2,2,2,2,2,2,2,2,4,4,4,4,4,4,4,4,4,4,4,4,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0},
				{0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0},
				{0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0},
				{0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0},
				{0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0},
				{0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0},
				{0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0},
				{0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
			};
			int PosX = spawnX - 23;  //spawnX and spawnY is where you want the anchor to be when this generates
			int PosY = spawnY;
			//i = vertical, j = horizontal
			for (int i = 0; i < _structure.GetLength(0); i++)
			{
				for (int j = _structure.GetLength(1) - 1; j >= 0; j--)
				{
					int k = PosX + j;
					int l = PosY + i;
					if (WorldGen.InWorld(k, l, 30))
					{
						Tile tile = Framing.GetTileSafely(k, l);
						switch (_structure[i, j])
						{
							case 2:
								tile.WallType = (ushort)WallType1;
								break;
							case 3:
								tile.WallType = WallID.Shadewood;
								break;
							case 4:
								tile.WallType = (ushort)ModContent.WallType<DullPlatingWallWall>();
								break;
							case 5:
								tile.WallType = (ushort)WallType2;
								break;
							case 6:
								tile.WallType = (ushort)WallType3;
								break;
							case 7:
								tile.WallType = WallID.CobaltBrick;
								break;
						}
					}
				}
			}
			_structure = new int[,]  {
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,2,2,2,2,2,0,0,3,1,1,1,1,4,0,3,1,1,1,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,2,2,2,2,2,2,5,2,2,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,4,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,2,1,1,1,1,1,6,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,4,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,4,0,0,0,0,0,0,0,0},
				{0,0,0,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0},
				{0,0,0,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,4,0,0,0,0,0,0,0},
				{0,0,0,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,7,7,7,1,4,0,0,0,0,0,0},
				{0,0,0,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0},
				{0,0,0,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,8,1,8,1,7,0,0,0,0,0,0},
				{0,0,0,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,9,9,9,9,9,0,0,0,0,0,0},
				{0,0,0,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0},
				{0,0,0,2,7,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,4,0,0,0,0},
				{0,0,0,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,11,1,1,1,0,0,0,0},
				{0,0,0,2,8,1,7,1,1,10,1,1,1,1,7,7,8,1,7,1,1,1,1,12,1,1,1,1,1,1,1,1,1,1,1,1,4,0,0,0},
				{0,0,0,2,2,2,2,2,5,5,5,2,0,0,0,9,9,9,9,9,9,9,2,2,2,9,9,9,0,1,1,1,1,1,1,1,1,0,0,0},
				{0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,14,16,16,16,16,16,16,2,2,2,16,16,16,16,16,16,16,16,16,16,16,16,0,0,0},
				{0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,14,17,17,17,17,17,2,2,2,17,17,17,17,17,17,17,17,17,17,17,17,0,0,0},
				{0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,18,18,17,17,2,2,2,7,17,17,17,7,7,7,17,17,17,17,19,0,0,0},
				{0,0,0,0,0,0,0,2,0,0,0,2,2,2,2,2,2,2,2,2,2,17,2,2,2,0,18,17,1,1,1,1,17,17,7,18,0,0,0,0},
				{0,0,0,0,0,0,0,2,2,2,2,2,2,2,17,17,2,2,2,2,2,17,2,2,2,0,0,14,8,1,8,1,7,19,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,2,2,2,2,2,2,2,20,17,17,17,17,17,17,17,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
			};
			//i = vertical, j = horizontal
			for (int confirmPlatforms = 0; confirmPlatforms < 2; confirmPlatforms++)    //Increase the iterations on this outermost for loop if tabletop-objects are not properly spawning
			{
				for (int i = 0; i < _structure.GetLength(0); i++)
				{
					for (int j = _structure.GetLength(1) - 1; j >= 0; j--)
					{
						int k = PosX + j;
						int l = PosY + i;
						if (WorldGen.InWorld(k, l, 30))
						{
							Tile tile = Framing.GetTileSafely(k, l);
							if (confirmPlatforms == 0)
							{
								if (_structure[i, j] != 17 && _structure[i, j] != 16)
								{
									tile.LiquidType = 0;
									tile.LiquidAmount = 0;
								}
							}
							switch (_structure[i, j])
							{
								case 0:
									tile.HasTile = true;
									tile.TileType = (ushort)TileType1;
									tile.Slope = 0;
									tile.IsHalfBlock = false;
									break;
								case 1:
									if (confirmPlatforms == 0)
									{
										tile.HasTile = false;
										tile.IsHalfBlock = false;
										tile.Slope = 0;
									}
									break;
								case 2:
									tile.HasTile = true;
									tile.TileType = (ushort)ModContent.TileType<DullPlatingTile>();
									tile.Slope = 0;
									tile.IsHalfBlock = false;
									break;
								case 3:
									tile.HasTile = true;
									tile.TileType = (ushort)TileType1;
									tile.Slope = (SlopeType)3;
									tile.IsHalfBlock = false;
									break;
								case 4:
									tile.HasTile = true;
									tile.TileType = (ushort)TileType1;
									tile.Slope = (SlopeType)4;
									tile.IsHalfBlock = false;
									break;
								case 5:
									tile.HasTile = true;
									tile.TileType = (ushort)ModContent.TileType<RoyalGoldBrickTile>();
									tile.Slope = 0;
									tile.IsHalfBlock = false;
									break;
								case 6:
									if (confirmPlatforms == 0)
										tile.HasTile = false;
									else
									{
										WorldGen.PlaceTile(k, l, ModContent.TileType<ArkhalisChainTile>(), true, true, -1, 0);
										tile.TileFrameX = 18;
										tile.Slope = 0;
										tile.IsHalfBlock = false;
									}
									break;
								case 7:
									if (confirmPlatforms == 1)
									{
										tile.HasTile = false;
										tile.Slope = 0;
										tile.IsHalfBlock = false;
										WorldGen.PlaceTile(k, l, TileID.GoldCoinPile, true, true, -1, 0);
									}
									break;
								case 8:
									if (confirmPlatforms == 1)
									{
										tile.HasTile = false;
										tile.Slope = 0;
										tile.IsHalfBlock = false;
										WorldGen.PlaceTile(k, l, TileID.FishingCrate, true, true, -1, 5);
									}
									break;
								case 9:
									if (confirmPlatforms == 0)
										tile.HasTile = false;
									WorldGen.PlaceTile(k, l, TileID.Platforms, true, true, -1, PlatformStyle);
									tile.Slope = 0;
									tile.IsHalfBlock = false;
									break;
								case 10:
									if (confirmPlatforms == 1)
									{
										WorldGen.PlaceTile(k, l, (ushort)ModContent.TileType<AncientGoldThroneTile>(), true, true, -1, 0);
									}
                                    else
									{
										tile.HasTile = false;
										tile.Slope = 0;
										tile.IsHalfBlock = false;
									}
									break;
								case 11:
									if (confirmPlatforms == 1)
									{
										tile.HasTile = false;
										tile.Slope = 0;
										tile.IsHalfBlock = false;
										WorldGen.PlaceTile(k, l, 240, true, true, -1, 17);
									}
									break;
								case 12:
									if (confirmPlatforms == 1)
									{
										tile.HasTile = false;
										tile.Slope = 0;
										tile.IsHalfBlock = false;
										WorldGen.PlaceTile(k, l, 215, true, true, -1, 7);
									}
									break;
								case 14:
									tile.HasTile = true;
									tile.TileType = (ushort)TileType1;
									tile.Slope = (SlopeType)1;
									tile.IsHalfBlock = false;
									break;
								case 16:
									if (confirmPlatforms == 0)
									{
										tile.HasTile = false;
										tile.IsHalfBlock = false;
										tile.Slope = 0;
										tile.LiquidAmount = 145;
										tile.LiquidType = 0;
									}
									break;
								case 17:
									if (confirmPlatforms == 0)
									{
										tile.HasTile = false;
										tile.IsHalfBlock = false;
										tile.Slope = 0;
										tile.LiquidAmount = 255;
										tile.LiquidType = 0;
									}
									break;
								case 18:
									tile.HasTile = true;
									tile.TileType = (ushort)TileType1;
									tile.Slope = 0;
									tile.IsHalfBlock = true;
									break;
								case 19:
									tile.HasTile = true;
									tile.TileType = (ushort)TileType1;
									tile.Slope = (SlopeType)2;
									tile.IsHalfBlock = false;
									break;
								case 20:
									if (confirmPlatforms == 1)
									{
										tile.HasTile = false;
										tile.Slope = 0;
										tile.IsHalfBlock = false;
										WorldGen.PlaceTile(k, l, ModContent.TileType<RuinedChestTile>(), true, true, -1, 1);
									}
									break;
							}
						}
					}
				}
			}
		}
		public static void GenerateIceRuin(int spawnX, int spawnY)
		{
			int[,] _structure = {
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0},
				{0,0,0,0,0,0,1,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0},
				{0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0},
				{0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,1,1,0,0,1,1,1,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0},
				{0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0},
				{0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0},
				{0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0},
				{0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0},
				{0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0},
				{0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0},
				{0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0},
				{2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2},
				{2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
				{2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
				{2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
				{2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
				{2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
				{2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
				{2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
				{2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
				{2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
				{2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
				{2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
				{2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
				{2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
				{2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
				{2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2}
			};
			int PosX = spawnX - _structure.GetLength(1) / 2;
			int PosY = spawnY - _structure.GetLength(0) + 16;
			//i = vertical, j = horizontal
			int radius = 36;
			int radiusY = 20;
			float scale = radiusY / (float)radius;
			float invertScale = (float)radius / radiusY;
			for (int x = -radius; x <= radius; x++)
			{
				for (float y = -radius; y <= radius; y += invertScale)
				{
					if (Math.Sqrt(x * x + y * y) <= radius + 0.5)
					{
						int xPosition6 = spawnX + x;
						int yPosition6 = spawnY + (int)(y * scale + 0.5f) - 17;
						Tile tile = Framing.GetTileSafely(xPosition6, yPosition6);
						tile.HasTile = false;
						tile.WallType = 0;
					}
				}
			}

			for (int i = 0; i < _structure.GetLength(0); i++)
			{
				for (int j = _structure.GetLength(1) - 1; j >= 0; j--)
				{
					int k = PosX + j;
					int l = PosY + i;
					if (WorldGen.InWorld(k, l, 30))
					{
						Tile tile = Framing.GetTileSafely(k, l);
						switch (_structure[i, j])
						{
							case 0:
								tile.WallType = 0;
								break;
							case 1:
								tile.WallType = (ushort)ModContent.WallType<HardIceBrickWallWall>();
								break;
							case 2:
								if (tile.HasTile)
									tile.WallType = 40;
								break;
						}
					}
				}
			}
			_structure = new int[,] {
				{0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,1,2,2,2,2,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,2,2,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,5,5,5,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,2,2,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,6,5,5,5,5,5,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,6,6,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,5,5,6,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,6,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,3,3,2,2,2,2,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,1,2,2,2,2,2,4,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,1,2,2,2,2,2,2,2,2,2,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,2,2,2,2,2,2,2,2,2,2,2,2,4,0,0,0,0,0},
				{0,0,0,1,2,2,2,2,5,5,5,5,5,2,2,2,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,2,2,2,2,2,5,5,5,5,5,2,2,2,2,2,4,0,0},
				{0,0,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,0},
				{0,0,0,0,5,5,5,5,5,6,6,6,5,5,5,5,5,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,5,5,5,5,5,0,0,6,6,5,5,5,5,5,0,0,0,0},
				{0,0,0,0,0,0,6,6,6,6,0,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,0,0,0,0,0,6,6,6,6,0,0,0,0,0,0},
				{0,0,0,0,0,0,6,6,6,6,0,6,6,0,0,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,0,0,0,0,0,0,6,6,6,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,6,6,0,0,0,6,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,7,0,6,0,0,0,6,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,0,0,0,0,0,0,0,0,0,6,6,6,6,6,0,0,0,0,0,0,0,0,0,6,6,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,6,6,6,0,0,0,0,0,5,5,5,6,6,0,0,0,0,8,0,0,6,6,6,6,5,5,5,0,0,0,0,0,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,6,6,6,6,6,6,6,0,0,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,0,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0},
				{0,0,0,6,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,0,0,0},
				{13,13,6,6,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,13,13},
				{13,6,6,6,6,5,5,5,6,6,6,6,6,5,5,5,6,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,5,5,5,6,6,6,6,6,6,5,5,5,6,6,6,6,13},
				{13,6,6,6,6,6,5,6,6,6,6,6,6,6,5,6,6,6,6,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,5,6,6,6,6,6,6,6,6,5,6,6,6,6,6,13},
				{13,13,9,9,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,13,13,13},
				{13,13,9,9,9,9,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,9,13,13,13},
				{13,13,13,9,9,9,9,9,9,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,9,9,13,13,13},
				{13,13,13,13,13,9,9,9,9,9,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,9,6,6,6,9,6,6,9,6,6,9,9,9,13,13,13},
				{13,13,13,13,13,13,9,9,9,9,9,9,9,9,6,6,6,6,6,6,9,6,6,6,6,6,9,9,6,6,6,6,6,6,6,6,6,9,6,6,9,9,9,6,6,9,9,6,9,6,9,9,13,13,13,13,13},
				{13,13,13,13,13,13,9,9,9,9,9,9,9,9,6,6,6,6,6,6,9,9,6,6,6,6,9,9,6,6,6,6,6,6,6,6,9,9,9,6,9,9,9,9,9,9,9,9,9,9,9,13,13,13,13,13,13},
				{13,13,13,13,13,13,13,13,13,13,9,9,9,9,9,9,9,6,6,6,9,9,9,6,6,9,9,9,6,6,6,6,9,6,6,6,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,13,13,13,13,13,13},
				{13,13,13,13,13,13,13,13,13,13,13,13,9,9,9,9,9,9,6,9,9,9,9,6,9,9,9,9,9,6,6,6,9,9,6,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,13,13,13,13,13,13,13},
				{13,13,13,13,13,13,13,13,13,13,13,13,13,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,6,6,6,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,13,13,13,13,13,13,13,13,13},
				{13,13,13,13,13,13,13,13,13,13,13,13,13,9,9,9,9,9,9,9,9,9,9,9,9,12,12,9,9,9,6,9,9,9,9,9,9,9,9,9,9,9,9,13,13,9,9,13,13,13,13,13,13,13,13,13,13},
				{13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,9,9,9,9,9,13,9,9,9,9,10,12,9,9,9,9,9,9,9,9,9,9,13,13,9,9,9,9,13,13,13,13,13,13,13,13,13,13,13,13,13,13},
				{13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,9,9,9,13,13,13,9,13,9,11,11,11,11,13,13,13,9,9,13,13,13,13,13,13,13,9,9,9,13,13,13,13,13,13,13,13,13,13,13,13,13,13},
				{13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,9,9,9,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,9,13,13,13,13,13,13,13,13,13,13,13,13,13,13},
				{13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,9,9,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13}
			};
			//i = vertical, j = horizontal
			for (int confirmPlatforms = 0; confirmPlatforms < 2; confirmPlatforms++)    //Increase the iterations on this outermost for loop if tabletop-objects are not properly spawning
			{
				for (int i = 0; i < _structure.GetLength(0); i++)
				{
					for (int j = _structure.GetLength(1) - 1; j >= 0; j--)
					{
						int k = PosX + j;
						int l = PosY + i;
						if (WorldGen.InWorld(k, l, 30))
						{
							Tile tile = Framing.GetTileSafely(k, l);
							switch (_structure[i, j])
							{
								case 1:
									tile.HasTile = true;
									tile.TileType = 147;
									tile.Slope = (SlopeType)2;
									tile.IsHalfBlock = false;
									break;
								case 2:
									tile.HasTile = true;
									tile.TileType = 147;
									tile.Slope = 0;
									tile.IsHalfBlock = false;
									break;
								case 3:
									tile.HasTile = true;
									tile.TileType = 147;
									tile.Slope = 0;
									tile.IsHalfBlock = true;
									break;
								case 4:
									tile.HasTile = true;
									tile.TileType = 147;
									tile.Slope = (SlopeType)1;
									tile.IsHalfBlock = false;
									break;
								case 5:
									tile.HasTile = true;
									tile.TileType = (ushort)ModContent.TileType<HardIceBrickTile>();
									tile.Slope = 0;
									tile.IsHalfBlock = false;
									break;
								case 6:
									if (confirmPlatforms == 0)
									{
										tile.HasTile = true;
										tile.TileType = (ushort)ModContent.TileType<FrigidIceTile>();
										tile.Slope = 0;
										tile.IsHalfBlock = false;
										if (i >= 22 && tile.WallType == 0)
										{
											tile.WallType = (ushort)ModContent.WallType<HardIceBrickWallWall>();
										}
									}
									break;
								case 7:
									if (confirmPlatforms == 0)
										tile.HasTile = false;
									WorldGen.PlaceTile(k, l, 4, true, true, -1, 9);
									tile.Slope = 0;
									tile.IsHalfBlock = false;
									break;
								case 8:
									if (confirmPlatforms == 1)
									{
										tile.HasTile = false;
										tile.Slope = 0;
										tile.IsHalfBlock = false;
										WorldGen.PlaceTile(k, l, ModContent.TileType<FrostArtifactTile>(), true, true, -1, 0);
									}
									break;
								case 9:
									if (confirmPlatforms == 0)
									{
										tile.HasTile = true;
										tile.TileType = 161;
										tile.Slope = 0;
										tile.IsHalfBlock = false;
										tile.WallType = WallID.IceUnsafe;
									}
									else
									{
										for (int up = 1; up <= 2; up++)
										{
											Tile tileAbove = Main.tile[k, l - up];
											if (tileAbove.TileType == ModContent.TileType<FrigidIceTile>() && WorldGen.genRand.NextBool(2 + up))
											{
												tileAbove.TileType = 161;
											}
										}
									}
									break;
								case 10:
									if (confirmPlatforms == 1)
									{
										tile.HasTile = false;
										tile.Slope = 0;
										tile.IsHalfBlock = false;
										WorldGen.PlaceTile(k, l, ModContent.TileType<Items.Furniture.Permafrost.PermafrostPlatingCapsuleTile>(), true, true, -1, 1);
										tile.WallType = (ushort)ModContent.WallType<HardIceBrickWallWall>();
									}
									break;
								case 11:
									tile.HasTile = true;
									tile.TileType = (ushort)ModContent.TileType<CharredWoodTile>();
									tile.Slope = 0;
									tile.IsHalfBlock = false;
									break;
								case 12:
									if (confirmPlatforms == 0)
									{
										tile.HasTile = false;
										tile.IsHalfBlock = false;
										tile.Slope = 0;
										tile.WallType = (ushort)ModContent.WallType<HardIceBrickWallWall>();
									}
									break;
								case 13:
									if (confirmPlatforms == 0 && TrueTileSolid(k, l))
									{
										tile.HasTile = true;
										tile.TileType = 147;
										tile.Slope = 0;
										tile.IsHalfBlock = false;
									}
									break;
							}
						}
					}
				}
			}
		}
		public static bool GenerateFrigidIceOre(int spawnX, int spawnY)
		{
			Tile tile = Framing.GetTileSafely(spawnX, spawnY);
			if (!tile.HasTile || tile.TileType == TileID.SnowBlock || tile.TileType == TileID.IceBlock || tile.TileType == TileID.Slush)
			{
				float rand = Main.rand.NextFloat(2 * (float)Math.PI);
				float interval = Main.rand.NextFloat(24, 32);
				int radius = 8 + Main.rand.Next(4);
				for (int x = -radius; x <= radius; x++)
				{
					for (int y = -radius; y <= radius; y++)
					{
						float noise = Main.rand.NextFloat(0.7f, 1f);
						int xP = spawnX + x;
						int yP = spawnY + y;
						float angle = (float)Math.Atan2(x, y);
						if (Math.Sqrt(x * x + (int)y * (int)y) <= radius + 0.5 && Math.Abs(MathHelper.WrapAngle(angle - rand)) < MathHelper.ToRadians(interval * noise))
						{
							tile = Framing.GetTileSafely(xP, yP);
							if (!tile.HasTile || tile.TileType == TileID.SnowBlock || tile.TileType == TileID.IceBlock || tile.TileType == TileID.Slush)
								tile.TileType = (ushort)ModContent.TileType<FrigidIceTile>();
						}
					}
				}
				return true;
			}
			else
				return false;
		}
		public static void GenerateVibrantGeode(int spawnX, int spawnY, int radius = 14, int radiusY = 14, float gemThickMult = 1f, float outThickMult = 1f)
		{
			float scale = radiusY / (float)radius;
			float invertScale = (float)radius / radiusY;
			for (int x = -radius - 1; x <= radius + 1; x++)
			{
				for (float y = -radius - 1; y <= radius + 1; y += invertScale * 0.95f)
				{
					float radialMod = Main.rand.NextFloat(3.25f, 3.75f) * outThickMult;
					float radialMod1 = 2f * outThickMult;
					float radialMod2 = Main.rand.NextFloat(2.5f, 3.5f) * gemThickMult;
					double distance = Math.Sqrt(x * x + y * y);
					int xPosition6 = spawnX + x;
					int yPosition6 = spawnY + (int)(y * scale);
					if (distance <= radius + 0.5 + Main.rand.NextFloat(-0.3f, 0.3f))
					{
						Tile tile = Framing.GetTileSafely(xPosition6, yPosition6);
						bool capable = true;
						if (distance >= radius + 0.5 - radialMod && capable)
						{
							tile.TileType = (ushort)ModContent.TileType<EvostoneTile>();
							tile.HasTile = true;
						}
						else if (distance >= radius + 0.5 - radialMod - radialMod1 && capable)
						{
							tile.WallType = WallID.Marble;
							tile.TileType = (ushort)ModContent.TileType<FakeMarble>();
							tile.HasTile = true;
						}
						else if (distance >= radius + 0.5 - radialMod - radialMod1 - radialMod2 && capable)
						{
							tile.WallType = (ushort)ModContent.WallType<VibrantWallWall>();
							tile.TileType = (ushort)ModContent.TileType<VibrantOreTile>();
							tile.HasTile = true;
						}
						else
						{
							tile.WallType = (ushort)ModContent.WallType<VibrantWallWall>();
							tile.HasTile = false;
						}
					}
				}
			}
		}
		public static void GeneratePhaseOre(int spawnX, int spawnY, int size = 20, int type = -1)
		{
			if (type < 0)
			{
				type = WorldGen.genRand.Next(2);
			}

			if (type == 0)
			{
				float rand = WorldGen.genRand.NextFloat(MathHelper.TwoPi);
				float frequency = WorldGen.genRand.NextFloat(0.3f, 0.5f);
				float amplitude = WorldGen.genRand.NextFloat(1.5f, 4.5f);
				float rotation = MathHelper.ToRadians(WorldGen.genRand.NextFloat(-30, 30));
				float torque = WorldGen.genRand.NextFloat(-60, 60) / size;
				Vector2 direction = new Vector2(WorldGen.genRand.Next(2) * 2 - 1, 0).RotatedBy(rotation);
				Vector2 start = new Vector2(spawnX, spawnY);
				Vector2 smoothArea = new Vector2(spawnX, spawnY);
				bool hasSpawnedCircle = false;
				for (int i = 0; i < size; i++)
				{
					Vector2 sinusoid = new Vector2(0, amplitude * (float)Math.Cos(rand)).RotatedBy(rotation);
					for (int j = 0; j < 9; j++)
					{
						Vector2 circular = new Vector2(j == 0 ? 0 : 1f, 0).RotatedBy(j * MathHelper.PiOver4);
						WorldGen.PlaceTile((int)(start.X + sinusoid.X + circular.X), (int)(start.Y + sinusoid.Y + circular.Y), ModContent.TileType<PhaseOreTile>(), true, false, -1, 0);
					}
					if (i == size / 2)
						smoothArea = start;
					start += direction;
					bool lessThan180 = rand < MathHelper.Pi;
					rand += frequency;
					bool greaterThan180 = rand > MathHelper.Pi;
					if (lessThan180 && greaterThan180 && !hasSpawnedCircle)
					{
						hasSpawnedCircle = true;
						if (WorldGen.genRand.NextBool(2))
						{
							Vector2 oppositeSinusoid = sinusoid * -1.75f * (4.5f - amplitude);
							GeneratePhaseCircle((int)(start.X + oppositeSinusoid.X), (int)(start.Y + oppositeSinusoid.Y), 4, 4, 1);
						}
					}
					direction = direction.RotatedBy(MathHelper.ToRadians(torque));
					rotation += MathHelper.ToRadians(torque);
				}
				SmoothRegion((int)smoothArea.X, (int)smoothArea.Y, size / 2 + 1, size / 2 + 1, ModContent.TileType<PhaseOreTile>());
			}
			if (type == 1)
			{
				Vector2 direction = new Vector2(2, 0).RotatedBy(MathHelper.ToRadians(WorldGen.genRand.NextFloat(360)));
				Vector2 pos = new Vector2(spawnX, spawnY);
				size = 3;
				for (int i = 0; i < 3; i++)
				{
					float twist = WorldGen.genRand.NextFloat(-120, 120);
					GeneratePhaseCircle((int)pos.X, (int)pos.Y, size, size, WorldGen.genRand.NextFloat(1.5f, 2.1f));
					pos += direction * size * WorldGen.genRand.NextFloat(1.2f, 1.8f);
					direction = direction.RotatedBy(MathHelper.ToRadians(twist));
					size++;
				}
			}
			if (type == 2)
			{
				GeneratePhaseTree(spawnX, spawnY, size / 4, Vector2.Zero, true);
			}
		}
		public static void GeneratePhaseTree(int spawnX, int spawnY, int i, Vector2 myDirection, bool startingTree = false)
		{
			if (i > 1)
				GeneratePhaseCircle((int)spawnX, (int)spawnY, (int)(i * 1.5f), (int)(i * 1.5f), (int)(i * 0.35f + 1));
			else
			{
				if (i <= 0)
				{
					for (int k = -1; k <= 1; k++)
					{
						for (int j = -1; j <= 1; j++)
						{
							if (k != 0 || j != 0)
								WorldGen.PlaceTile((int)spawnX + k, (int)spawnY + j, ModContent.TileType<PhaseOreTile>());
						}
					}
					return;
				}
				else
					GeneratePhaseCircle((int)spawnX, (int)spawnY, 2, 2, 1f);
			}
			float lengthMultiplier = WorldGen.genRand.NextFloat(2.3f, 3.3f);
			if (startingTree)
			{
				i--;
				float iRand = WorldGen.genRand.NextFloat(360);
				for (int k = 0; k < 3; k++)
				{
					float rand = WorldGen.genRand.NextFloat(-45, 45);
					Vector2 direction = new Vector2(1, 0).RotatedBy(MathHelper.ToRadians(k * 120 + rand + iRand));
					Vector2 spawnPos = new Vector2(spawnX, spawnY) + direction * i * 1.5f;
					for (float j = i * lengthMultiplier + 1; j > 0; j--)
					{
						for (int a = 0; a < 5; a++)
						{
							Vector2 circular = new Vector2(a == 0 ? 0 : 0.6f, 0).RotatedBy(a * MathHelper.PiOver2);
							WorldGen.PlaceTile((int)(spawnPos.X + circular.X), (int)(spawnPos.Y + circular.Y), ModContent.TileType<PhaseOreTile>(), true, false, -1, 0);
						}
						if (j == (int)(i * lengthMultiplier * 0.5f))
						{
							SmoothRegion((int)spawnPos.X, (int)spawnPos.Y, (int)(i * lengthMultiplier * 0.6f), (int)(i * lengthMultiplier * 0.6f), ModContent.TileType<PhaseOreTile>());
						}
						spawnPos += direction;
					}
					spawnPos += direction * (i - 1) * 1.5f;
					GeneratePhaseTree((int)spawnPos.X, (int)spawnPos.Y, i - 1, direction);
				}
			}
			else if (i > 0)
			{
				for (int k = -1; k <= 1; k += 2)
				{
					if (!WorldGen.genRand.NextBool(i + 3))
					{
						float rand = WorldGen.genRand.NextFloat(-24 + i, 24 - i);
						Vector2 direction = myDirection.RotatedBy(MathHelper.ToRadians(k * WorldGen.genRand.NextFloat(30, 45) + rand));
						Vector2 spawnPos = new Vector2(spawnX, spawnY) + direction * i * 1.5f;
						for (float j = i * lengthMultiplier + 1; j > 0; j--)
						{
							for (int a = 0; a < 5; a++)
							{
								Vector2 circular = new Vector2(a == 0 ? 0 : 0.6f, 0).RotatedBy(a * MathHelper.PiOver2);
								WorldGen.PlaceTile((int)(spawnPos.X + circular.X), (int)(spawnPos.Y + circular.Y), ModContent.TileType<PhaseOreTile>(), true, false, -1, 0);
							}
							if (j == (int)(i * lengthMultiplier * 0.5f))
							{
								SmoothRegion((int)spawnPos.X, (int)spawnPos.Y, (int)(i * lengthMultiplier * 0.6f), (int)(i * lengthMultiplier * 0.6f), ModContent.TileType<PhaseOreTile>());
							}
							spawnPos += direction;
						}
						spawnPos += direction * (i - 1) * 1.5f;
						GeneratePhaseTree((int)spawnPos.X, (int)spawnPos.Y, i - 1, direction);
					}
				}
			}
		}
		public static void GeneratePhaseCircle(int spawnX, int spawnY, int radius = 14, int radiusY = 14, float thickness = 2)
		{
			float scale = radiusY / (float)radius;
			float invertScale = (float)radius / radiusY;
			for (float x = -radius; x <= radius; x += 0.5f)
			{
				for (float y = -radius; y <= radius; y += invertScale * 0.5f)
				{
					double distance = Math.Sqrt(x * x + y * y);
					int xPosition6 = spawnX + (int)x;
					int yPosition6 = spawnY + (int)(y * scale);
					if (distance <= radius + 0.5f)
					{
						if (distance >= radius - thickness)
						{
							WorldGen.PlaceTile(xPosition6, yPosition6, ModContent.TileType<PhaseOreTile>(), true, false, -1, 0);
						}
					}
				}
			}
			SmoothRegion(spawnX, spawnY, radius, radiusY, ModContent.TileType<PhaseOreTile>());
		}
		public static void FindAndGenerateBigGeode(int jungleSide)
		{
			int half = (int)(Main.maxTilesX * 0.66f);
			int templeX = 0;
			int templeY = 0;
			for (int j = Main.maxTilesY - 100; j > 0; j--)
			{
				int i = 100;
				if (jungleSide == 1)
				{
					i = Main.maxTilesX - 100;
				}
				bool done = false;
				bool contin = true;
				while (contin)
				{
					if (jungleSide == 1)
					{
						i--;
						if (i < Main.maxTilesX - half)
						{
							contin = false;
						}
					}
					else
					{
						i++;
						if (i > half)
						{
							contin = false;
						}
					}
					Tile tile = Main.tile[i, j];
					if (tile.TileType == TileID.LihzahrdBrick)
					{
						templeX = i;
						templeY = j;
						done = true;
						break;
					}
				}
				if (done)
				{
					break;
				}
			}
			if (templeX == 0 && templeY == 0)
			{
				for (int i = 0; i < 1000; i++)
				{
					int posX = Main.rand.Next(200, Main.maxTilesX - 200);
					int posY = Main.rand.Next(Main.maxTilesY / 2, Main.maxTilesY - 200);
					Tile tile = Main.tile[posX, posY];
					if (tile.TileType == TileID.JungleGrass)
					{
						GenerateBigGeode(posX, posY, jungleSide);
						return;
					}
				}
			}
			int tilesLeft = 0;
			int tilesRight = 0;
			Point finalPoint = new Point(templeX, templeY);
			for (int i = 1000; i > 140; i--)
			{
				int p = templeX + i;
				if (!WorldGen.InWorld(p, templeY))
				{
					tilesRight = -1;
					break;
				}
				else
				{
					Tile tile = Main.tile[p, templeY];
					if (tile.TileType == TileID.JungleGrass)
					{
						tilesRight = i;
						break;
					}
				}
			}
			for (int i = 1000; i > 140; i--)
			{
				int p = templeX - i;
				if (!WorldGen.InWorld(p, templeY))
				{
					tilesLeft = -1;
					break;
				}
				else
				{
					Tile tile = Main.tile[p, templeY];
					if (tile.TileType == TileID.JungleGrass)
					{
						tilesLeft = i;
						break;
					}
				}
			}
			if (tilesLeft != -1 || tilesRight != -1)
			{
				if (tilesLeft > tilesRight)
				{
					finalPoint.X = templeX - tilesLeft;
				}
				else
					finalPoint.X = templeX + tilesRight;
				if (finalPoint.X == templeX)
					finalPoint.X += 140 * (WorldGen.genRand.Next(2) * 2 - 1);
				GenerateBigGeode(finalPoint.X, finalPoint.Y, jungleSide);
			}
		}
		public static void GenerateBigGeode(int spawnX, int spawnY, int direction = 1)
		{
			if (direction != -1 && direction != 1)
				return;
			int[,] _structure =  {
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,2,1,2,2,2,2,1,2,1,2,2,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,0,0,0,0,0,0,0,0,0,0},
				{0,3,3,3,3,3,3,3,3,3,3,3,3,1,1,1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,0,0,0,0,0,0,0,0,0},
				{0,3,3,3,3,3,3,3,3,3,3,3,3,1,1,1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,0,0,0,0,0,0,0,0,0},
				{0,3,4,4,4,4,5,4,4,4,5,4,4,4,5,4,4,4,5,4,4,4,5,4,4,4,5,4,4,4,5,4,4,4,5,4,4,4,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,0,0,0,0,0,0,0,0,0},
				{0,3,4,4,4,4,5,3,3,3,5,3,3,3,5,3,3,3,5,3,3,3,5,3,3,3,5,4,4,4,5,3,3,3,5,4,4,4,4,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,0,0,0,0,0,0,0,0},
				{0,3,4,4,4,4,5,6,6,6,5,3,3,3,5,6,6,6,5,3,3,3,5,6,6,6,5,4,4,4,5,6,6,6,5,4,4,4,4,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,0,0,0,0,0,0,0,0},
				{0,3,4,4,4,4,5,3,3,3,5,3,3,3,5,3,3,3,5,3,3,3,5,3,3,3,5,4,4,4,5,3,3,3,5,4,4,4,4,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,0,0,0,0,0,0,0},
				{0,3,4,4,4,4,5,4,4,4,5,4,4,4,5,4,4,4,5,4,4,4,5,4,4,4,5,4,4,4,5,4,4,4,5,4,4,4,4,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,0,0,0,0,0,0,0},
				{0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,0,0,0,0,0,0,0},
				{0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,2,1,2,2,2,2,2,2,2,2,2,2,2,2,1,2,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
			};
			int PosX = spawnX - ((_structure.GetLength(1) - 1) * direction);
			int PosY = spawnY - _structure.GetLength(0) / 2;
			for (int i = 0; i < _structure.GetLength(0); i++)
			{
				for (int j = _structure.GetLength(1) - 1; j >= 0; j--)
				{
					int k = PosX + (j * direction);
					int l = PosY + i;
					if (WorldGen.InWorld(k, l, 30))
					{
						Tile tile = Framing.GetTileSafely(k, l);
						switch (_structure[i, j])
						{
							case 1:
								tile.WallType = 183;
								break;
							case 2:
								tile.WallType = (ushort)ModContent.WallType<VibrantWallWall>();
								tile.LiquidAmount = 0;
								tile.LiquidType = 0;
								break;
							case 3:
								tile.WallType = (ushort)ModContent.WallType<EarthenPlatingWallWall>();
								break;
							case 4:
								tile.WallType = (ushort)ModContent.WallType<EarthenPlatingPanelWallWall>();
								break;
							case 5:
								tile.WallType = (ushort)ModContent.WallType<EarthenPlatingBeamWall>();
								break;
							case 6:
								tile.WallType = (ushort)ModContent.WallType<EarthWallWall>();
								break;
						}
					}
				}
			}
			_structure = new int[,] {
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,2,1,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,3,2,3,3,3,3,2,3,2,3,3,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,3,3,0,3,3,3,3,3,3,0,0,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,0,0,3,0,3,0,3,3,3,0,0,0,0,0,3,0,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,0,0,0,0,0,0,0,0,3,3,3,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,3,3,4,0,0,0,0,0,0,0,0,0,3,0,3,0,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,2,2,2,2,3,3,3,3,3,3,3,3,3,3,0,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,2,2,2,2,3,3,3,3,3,3,3,3,3,0,0,0,0,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,3,3,3,3,3,4,3,3,3,3,3,3,3,3,3,3,2,2,2,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,2,2,2,3,3,3,3,3,3,3,3,3,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3,4,0,0,0,0,0,3,3,3,3,3,3,3,2,2,2,2,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,2,2,2,3,3,3,3,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,3,3,3,4,0,0,0,0,0,0,0,3,3,3,3,3,3,3,3,2,2,2,1,1,1,1,1,1,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,2,2,2,2,3,3,3,3,3,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,4,0,0,0,0,0,0,0,0,0,0,3,3,3,3,3,3,3,3,2,2,1,1,1,1,1,1,1,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,2,2,2,3,3,3,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,4,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3,3,3,3,2,2,2,2,1,1,1,1,1,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,2,2,2,2,3,3,3,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,3,3,3,3,3,3,3,2,2,2,1,1,1,1,1,1,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,2,2,2,2,3,3,3,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3,3,3,3,3,2,2,2,1,1,1,1,1,1,0,0,0,0,0,0},
				{0,0,0,0,0,8,8,8,8,8,8,8,8,8,1,2,2,2,3,3,3,3,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3,3,3,3,2,2,2,1,1,1,1,1,1,0,0,0,0,0},
				{0,0,0,0,0,8,8,8,8,8,8,8,8,8,2,2,2,3,3,3,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3,3,3,3,2,2,2,1,1,1,1,1,0,0,0,0,0},
				{8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3,3,3,3,3,2,2,2,1,1,1,1,1,1,0,0,0,0},
				{8,8,9,9,9,9,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,10,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3,3,3,3,2,2,2,2,1,1,1,1,1,0,0,0,0},
				{8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,10,10,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3,3,3,3,2,2,2,1,1,1,1,1,0,0,0,0},
				{8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,8,0,8,0,0,0,0,0,0,0,10,10,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3,3,3,3,3,2,2,1,1,1,1,1,1,0,0,0},
				{8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,12,0,8,0,0,0,0,0,0,0,0,10,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3,3,3,2,2,2,2,1,1,1,1,1,0,0,0},
				{0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,14,0,10,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3,3,3,2,2,2,1,1,1,1,1,1,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,10,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3,3,3,3,2,2,2,1,1,1,1,1,0,0},
				{0,13,0,7,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,15,0,0,0,0,0,13,0,12,0,13,0,0,0,0,0,0,18,0,10,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3,3,3,3,2,2,2,1,1,1,1,1,0,0},
				{8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,0,12,0,8,8,8,8,8,8,8,8,8,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3,3,2,2,2,1,1,1,1,1,0,0},
				{8,8,9,9,9,9,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,0,12,0,8,8,8,8,8,8,8,8,8,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3,3,3,3,2,2,2,1,1,1,1,1,0},
				{8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,0,12,0,8,8,8,8,8,8,8,8,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3,3,3,3,2,2,2,1,1,1,1,1,0},
				{0,0,0,0,0,8,8,8,8,8,8,8,8,8,3,3,3,3,3,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3,3,2,2,2,1,1,1,1,1,0},
				{0,0,0,0,0,8,8,8,8,8,8,8,8,8,3,3,3,3,20,20,20,20,20,20,20,20,20,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,20,20,20,20,20,20,20,20,20,3,3,3,3,3,3,2,2,2,1,1,1,1,1,0},
				{0,0,0,0,1,1,1,1,1,2,2,2,2,3,3,3,3,3,20,20,20,20,20,20,20,20,20,20,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,20,20,20,20,20,20,20,20,20,3,3,3,3,3,3,3,2,2,2,1,1,1,1,1},
				{0,0,0,0,1,1,1,1,1,2,2,2,3,3,3,3,3,3,3,0,0,0,0,0,20,20,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,20,0,0,0,0,0,0,3,3,3,3,3,3,2,2,2,1,1,1,1,1},
				{0,0,0,0,0,1,1,1,1,2,2,2,3,3,3,3,3,0,0,0,0,0,0,0,20,20,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,20,0,0,0,0,0,0,3,3,3,3,3,3,2,2,2,1,1,1,1,1},
				{0,0,0,0,1,1,1,1,1,2,2,2,3,3,3,3,3,0,3,0,0,0,0,0,20,20,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,20,0,0,0,0,0,0,0,3,3,3,3,3,2,2,2,1,1,1,1,1},
				{0,0,0,0,1,1,1,1,1,2,2,2,3,3,3,3,3,3,3,0,0,0,0,0,0,20,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,20,0,0,0,0,0,0,0,3,3,3,3,3,2,2,2,1,1,1,1,1},
				{0,0,0,0,1,1,1,1,1,2,2,2,3,3,3,3,3,3,0,0,0,0,0,0,0,20,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,20,0,0,0,0,0,0,0,3,3,3,3,3,2,2,2,1,1,1,1,1},
				{0,0,0,0,1,1,1,1,1,2,2,2,3,3,3,3,3,3,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,20,0,0,0,0,0,0,3,3,3,3,3,3,2,2,2,1,1,1,1,1},
				{0,0,0,0,1,1,1,1,1,2,2,3,3,3,3,3,3,3,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,20,0,0,0,0,0,0,3,3,3,3,3,3,2,2,2,1,1,1,1,1},
				{0,0,0,0,1,1,1,1,1,2,2,2,3,3,3,3,3,3,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,20,0,0,0,0,0,0,3,3,3,3,3,3,2,2,2,1,1,1,1,1},
				{0,0,0,0,1,1,1,1,1,2,2,2,3,3,3,3,3,0,3,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,20,0,0,0,0,0,0,3,3,3,3,3,3,2,2,2,1,1,1,1,1},
				{0,0,0,0,1,1,1,1,1,2,2,2,3,3,3,3,3,3,3,0,0,0,0,0,20,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,21,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,21,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,20,0,0,0,0,0,0,3,3,3,3,3,3,2,2,2,1,1,1,1,1},
				{0,0,0,0,1,1,1,1,1,2,2,2,3,3,3,3,3,3,0,0,0,0,0,0,20,20,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,21,21,0,0,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,0,0,21,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,20,0,0,0,0,0,0,0,3,3,3,3,3,2,2,2,1,1,1,1,1},
				{0,0,0,0,1,1,1,1,1,2,2,2,3,3,3,3,3,3,3,0,0,0,0,0,20,20,0,0,12,0,0,0,0,0,0,0,0,0,0,0,21,21,0,0,0,0,0,0,20,20,20,20,20,20,20,20,20,20,20,20,20,0,0,0,0,0,0,21,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,20,0,0,0,0,0,0,3,3,3,3,3,3,2,2,2,1,1,1,1,1},
				{0,0,0,0,1,1,1,1,1,2,2,2,3,3,3,3,3,3,0,0,0,0,0,0,20,20,0,0,12,0,0,0,0,0,0,0,0,0,21,21,0,0,0,0,0,0,0,0,0,0,20,20,20,20,20,20,20,20,20,0,0,0,0,0,0,0,0,0,0,21,21,0,0,0,0,0,0,0,0,0,0,0,0,20,20,0,0,0,0,0,0,3,3,3,3,3,3,2,2,2,1,1,1,1,1},
				{0,0,0,0,0,1,1,1,1,1,2,2,3,3,3,3,3,3,0,0,0,0,0,0,20,20,0,0,12,0,0,0,0,0,0,0,21,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,21,0,0,0,0,0,0,0,0,0,0,20,20,0,0,0,0,0,0,3,3,3,3,3,3,2,2,2,1,1,1,1,1},
				{0,0,0,0,0,1,1,1,1,1,2,2,2,3,3,3,3,3,3,0,0,16,0,0,20,20,0,0,12,0,0,0,0,0,21,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,21,0,0,0,0,0,0,0,0,20,20,0,0,0,0,3,3,3,3,3,3,3,3,2,2,1,1,1,1,1,0},
				{0,0,0,0,0,1,1,1,1,1,2,2,2,3,3,3,3,3,3,3,20,20,20,20,20,20,20,20,20,20,20,20,20,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,3,3,3,3,3,3,2,2,2,1,1,1,1,1,0},
				{0,0,0,0,0,1,1,1,1,1,2,2,2,3,3,3,3,3,3,3,20,20,20,20,20,20,20,20,20,20,20,20,20,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,20,20,20,20,20,20,20,20,20,20,20,20,20,3,3,3,3,3,3,3,2,2,2,1,1,1,1,1,0},
				{0,0,0,0,0,1,1,1,1,1,2,2,2,2,3,3,3,3,3,3,0,0,0,0,0,0,0,0,0,20,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,20,0,0,0,0,0,0,0,0,0,3,3,3,3,3,3,3,2,2,1,1,1,1,1,1,0},
				{0,0,0,0,0,0,1,1,1,1,1,2,2,2,3,3,3,3,3,3,0,0,0,0,0,0,0,0,0,20,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,20,0,0,0,0,0,0,0,0,3,3,3,3,3,3,3,2,2,2,2,1,1,1,1,0,0},
				{0,0,0,0,0,0,1,1,1,1,1,2,2,2,3,3,3,3,3,3,0,0,0,0,0,0,0,0,0,20,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,20,0,0,0,0,0,0,0,0,3,3,3,3,3,3,3,2,2,2,1,1,1,1,1,0,0},
				{0,0,0,0,0,0,1,1,1,1,1,1,2,2,3,3,3,3,3,3,3,0,0,0,0,0,0,0,0,20,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,20,0,0,0,0,0,0,0,0,3,3,3,3,3,3,2,2,2,2,1,1,1,1,1,0,0},
				{0,0,0,0,0,0,1,1,1,1,1,1,2,2,2,3,3,3,3,3,3,0,0,0,0,0,0,0,0,20,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,20,0,0,0,0,0,0,0,0,3,3,3,3,3,3,2,2,2,1,1,1,1,1,0,0,0},
				{0,0,0,0,0,0,0,1,1,1,1,1,2,2,2,3,3,3,3,3,3,3,3,0,0,0,0,0,0,20,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,20,0,0,0,0,0,0,3,3,3,3,3,3,3,3,2,2,2,1,1,1,1,1,0,0,0},
				{0,0,0,0,0,0,0,1,1,1,1,1,2,2,2,2,3,3,3,3,3,0,0,0,0,0,0,0,0,20,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,20,0,0,0,0,0,0,0,3,3,3,3,3,3,3,2,2,2,1,1,1,1,1,0,0,0},
				{0,0,0,0,0,0,0,1,1,1,1,1,1,2,2,2,3,3,3,3,3,3,3,0,0,0,0,0,0,20,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,20,0,0,0,0,0,0,0,3,3,3,3,3,3,2,2,2,2,1,1,1,1,1,0,0,0},
				{0,0,0,0,0,0,0,0,1,1,1,1,1,2,2,2,3,3,3,3,3,3,0,0,0,0,0,0,0,20,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,20,0,0,0,0,0,3,3,3,3,3,3,3,2,2,2,1,1,1,1,1,1,0,0,0,0},
				{0,0,0,0,0,0,0,0,1,1,1,1,1,1,2,2,2,3,3,3,3,3,3,3,0,0,0,0,0,20,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,20,0,0,0,0,0,0,3,3,3,3,3,3,2,2,2,1,1,1,1,1,1,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,1,1,1,1,1,2,2,2,2,3,3,3,3,3,3,0,0,0,0,0,20,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,22,23,23,23,23,23,23,23,23,23,23,23,23,23,23,20,20,0,0,0,0,3,3,3,3,3,3,3,2,2,2,2,1,1,1,1,1,1,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,1,1,1,1,1,2,2,2,2,3,3,3,3,3,3,3,0,0,0,0,20,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,24,24,24,24,24,24,24,24,24,24,24,24,20,20,25,25,25,25,3,3,3,3,3,3,3,2,2,2,1,1,1,1,1,1,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,2,2,2,2,3,3,3,3,3,3,3,0,0,0,20,20,0,0,0,0,0,0,0,0,0,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,24,24,24,24,24,24,24,24,24,24,24,20,20,24,24,24,24,3,3,3,3,3,3,2,2,2,2,1,1,1,1,1,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,2,2,2,3,3,3,3,3,3,3,26,26,26,20,20,27,27,27,27,27,27,27,27,27,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3,3,24,24,24,24,24,24,24,24,20,20,24,24,24,3,3,3,3,3,3,3,2,2,2,1,1,1,1,1,1,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,2,2,2,2,3,3,3,3,3,3,3,3,20,20,3,3,24,24,24,24,24,24,24,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3,3,3,24,24,24,24,24,24,20,20,3,3,3,3,3,3,3,3,2,2,2,2,1,1,1,1,1,1,1,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,24,24,24,24,24,24,6,3,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3,3,3,3,3,24,3,3,20,3,3,3,3,3,3,3,3,3,2,2,2,1,1,1,1,1,1,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,2,2,2,3,3,3,3,3,3,3,3,3,3,24,24,24,24,24,24,24,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,22,0,0,0,0,0,0,0,0,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,1,1,1,1,1,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,2,2,2,2,3,3,3,3,3,3,3,3,24,24,3,24,24,24,24,6,3,3,3,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,29,29,29,29,29,29,29,29,29,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,2,2,2,2,3,3,3,3,3,3,3,24,3,3,24,24,24,24,3,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,24,24,24,24,24,24,24,24,24,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,2,2,2,2,3,3,3,3,3,3,3,3,3,24,3,24,6,3,3,3,3,3,0,0,0,0,0,0,0,0,3,0,0,0,0,0,3,3,3,24,24,24,24,24,24,24,24,24,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,2,2,2,3,3,3,3,3,3,3,3,3,3,0,6,3,3,3,3,3,3,0,0,0,0,0,0,0,0,3,30,30,30,30,30,3,3,3,3,3,24,24,24,24,24,24,24,24,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,28,31,31,31,31,31,31,3,3,24,24,24,24,3,3,3,3,3,3,3,24,24,24,24,24,24,24,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,24,24,24,24,24,24,3,3,3,24,24,24,3,3,3,3,3,3,3,3,3,24,24,24,3,3,0,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,24,24,24,24,24,24,3,3,3,24,24,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,28,24,24,24,24,3,3,3,3,3,24,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,3,2,3,3,3,3,3,3,3,3,3,3,3,3,2,3,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
			};
			for (int confirmPlatforms = 0; confirmPlatforms < 2; confirmPlatforms++)    //Increase the iterations on this outermost for loop if tabletop-objects are not properly spawning
			{
				for (int i = 0; i < _structure.GetLength(0); i++)
				{
					for (int j = _structure.GetLength(1) - 1; j >= 0; j--)
					{
						int k = PosX + (j * direction);
						int l = PosY + i;
						if (WorldGen.InWorld(k, l, 30))
						{
							Tile tile = Framing.GetTileSafely(k, l);
							switch (_structure[i, j])
							{
								case 0:
									if (confirmPlatforms == 0 && (tile.WallType == ModContent.WallType<VibrantWallWall>() || tile.WallType == ModContent.WallType<EarthWallWall>() || tile.WallType == ModContent.WallType<EarthenPlatingWallWall>() || tile.WallType == ModContent.WallType<EarthenPlatingPanelWallWall>() || tile.WallType == ModContent.WallType<EarthenPlatingBeamWall>()))
									{
										tile.HasTile = false;
										tile.IsHalfBlock = false;
										tile.Slope = 0;
									}
									break;
								case 1:
									tile.HasTile = true;
									tile.TileType = (ushort)ModContent.TileType<EvostoneTile>();
									tile.Slope = 0;
									tile.IsHalfBlock = false;
									break;
								case 2:
									tile.HasTile = true;
									tile.TileType = (ushort)ModContent.TileType<FakeMarble>();
									tile.Slope = 0;
									tile.IsHalfBlock = false;
									tile.WallType = WallID.MarbleUnsafe;
									break;
								case 3:
									tile.HasTile = true;
									tile.TileType = (ushort)ModContent.TileType<VibrantOreTile>();
									tile.Slope = 0;
									tile.IsHalfBlock = false;
									break;
								case 4:
									tile.HasTile = true;
									tile.TileType = (ushort)ModContent.TileType<VibrantOreTile>();
									tile.Slope = (SlopeType)(direction == 1 ? 3 : 4);
									tile.IsHalfBlock = false;
									break;
								case 5:
									tile.HasTile = true;
									tile.TileType = (ushort)ModContent.TileType<VibrantOreTile>();
									tile.Slope = (SlopeType)(direction == 1 ? 4 : 3);
									tile.IsHalfBlock = false;
									break;
								case 6:
									tile.HasTile = true;
									tile.TileType = (ushort)ModContent.TileType<VibrantOreTile>();
									tile.Slope = (SlopeType)(direction == 1 ? 2 : 1);
									tile.IsHalfBlock = false;
									break;
								case 7:
									if (confirmPlatforms == 1)
									{
										tile.HasTile = false;
										tile.Slope = 0;
										tile.IsHalfBlock = false;
										WorldGen.PlaceTile(k - (direction == 1 ? 0 : 1), l, ModContent.TileType<EarthenPlatingStorageTile>(), true, true, -1, 0);
									}
									break;
								case 8:
									tile.HasTile = true;
									tile.TileType = (ushort)ModContent.TileType<EarthenPlatingTile>();
									tile.Slope = 0;
									tile.IsHalfBlock = false;
									break;
								case 9:
									tile.HasTile = true;
									tile.TileType = (ushort)ModContent.TileType<DissolvingEarthTile>();
									tile.Slope = 0;
									tile.IsHalfBlock = false;
									break;
								case 10:
									tile.HasTile = true;
									tile.TileType = 54;
									tile.Slope = 0;
									tile.IsHalfBlock = false;
									break;
								case 11: //left off here
									if (confirmPlatforms == 1)
									{
										tile.HasTile = false;
										tile.Slope = 0;
										tile.IsHalfBlock = false;
										WorldGen.PlaceTile(k, l, ModContent.TileType<EarthenPlatingBookcaseTile>(), true, true, -1, 0);
									}
									break;
								case 12:
									tile.HasTile = true;
									tile.TileType = 214;
									tile.Slope = 0;
									tile.IsHalfBlock = false;
									break;
								case 13:
									if (confirmPlatforms == 1)
									{
										tile.HasTile = false;
										tile.Slope = 0;
										tile.IsHalfBlock = false;
										WorldGen.PlaceTile(k, l, ModContent.TileType<EarthenPlatingBlastDoorTileClosed>(), true, true, -1, 0);
									}
									break;
								case 14:
									if (confirmPlatforms == 0)
										tile.HasTile = false;
									WorldGen.PlaceTile(k, l, ModContent.TileType<EarthenPlatingTorchTile>(), true, true, -1, 0);
									tile.Slope = 0;
									tile.IsHalfBlock = false;
									break;
								case 15:
									if (confirmPlatforms == 1)
									{
										tile.HasTile = false;
										tile.Slope = 0;
										tile.IsHalfBlock = false;
										WorldGen.PlaceTile(k, l, ModContent.TileType<EarthenPlatingLampTile>(), true, true, -1, 0);
									}
									break;
								case 16:
									if (confirmPlatforms == 1)
									{
										tile.HasTile = false;
										tile.Slope = 0;
										tile.IsHalfBlock = false;
										WorldGen.PlaceTile(k - (direction == 1 ? 0 : 1), l, ModContent.TileType<EarthenPlatingStorageTile>(), true, true, -1, 1);
									}
									break;
								case 17:
									if (confirmPlatforms == 1)
									{
										tile.HasTile = false;
										tile.Slope = 0;
										tile.IsHalfBlock = false;
										WorldGen.PlaceTile(k, l, ModContent.TileType<EarthenPlatingChairTile>(), true, true, -1, 0);
									}
									break;
								case 18:
									if (confirmPlatforms == 1)
									{
										tile.HasTile = false;
										tile.Slope = 0;
										tile.IsHalfBlock = false;
										WorldGen.PlaceTile(k, l, ModContent.TileType<EarthenPlatingTableTile>(), true, true, -1, 0);
									}
									break;
								case 19:
									if (confirmPlatforms == 1)
									{
										tile.HasTile = false;
										tile.Slope = 0;
										tile.IsHalfBlock = false;
										WorldGen.PlaceTile(k + (direction == 1 ? 0 : 2), l, ModContent.TileType<BigCrystalTile>(), true, true, -1, 0);
									}
									break;
								case 20:
									tile.HasTile = true;
									tile.TileType = (ushort)ModContent.TileType<VibrantBrickTile>();
									tile.Slope = 0;
									tile.IsHalfBlock = false;
									break;
								case 21:
									if (confirmPlatforms == 0)
									{
										tile.HasTile = false;
										tile.Slope = 0;
										tile.IsHalfBlock = false;
										WorldGen.PlaceTile(k, l, ModContent.TileType<EarthenPlatingPlatformTile>(), true, true, -1, 0);
									}
									break;
								case 22:
									tile.HasTile = true;
									tile.TileType = (ushort)ModContent.TileType<VibrantOreTile>();
									tile.Slope = 0;
									tile.IsHalfBlock = true;
									break;
								case 23:
								case 26:
									if (confirmPlatforms == 0)
									{
										tile.HasTile = false;
										tile.IsHalfBlock = false;
										tile.Slope = 0;
										tile.LiquidAmount = 164;
										tile.LiquidType = 0;
									}
									break;
								case 24:
								case 27:
									if (confirmPlatforms == 0)
									{
										tile.HasTile = false;
										tile.IsHalfBlock = false;
										tile.Slope = 0;
										tile.LiquidAmount = 255;
										tile.LiquidType = 0;
									}
									break;
								case 25:
									if (confirmPlatforms == 0)
									{
										tile.HasTile = false;
										tile.IsHalfBlock = false;
										tile.Slope = 0;
										tile.LiquidAmount = 96;
										tile.LiquidType = 0;
									}
									break;
								case 28:
									tile.HasTile = true;
									tile.TileType = (ushort)ModContent.TileType<VibrantOreTile>();
									tile.Slope = (SlopeType)(direction == 1 ? 1 : 2);
									tile.IsHalfBlock = false;
									break;
								case 29:
								case 31:
									if (confirmPlatforms == 0)
									{
										tile.HasTile = false;
										tile.IsHalfBlock = false;
										tile.Slope = 0;
										tile.LiquidAmount = 65;
										tile.LiquidType = 0;
									}
									break;
								case 30:
									if (confirmPlatforms == 0)
									{
										tile.HasTile = false;
										tile.IsHalfBlock = false;
										tile.Slope = 0;
										tile.LiquidAmount = 37;
										tile.LiquidType = 0;
									}
									break;
							}
							if (tile.TileType == ModContent.TileType<VibrantOreTile>() || tile.TileType == ModContent.TileType<VibrantBrickTile>())
							{
								tile.WallType = (ushort)ModContent.WallType<VibrantWallWall>();
							}
						}
					}
				}
			}
		}
		public static void SpamCrystals(bool removeWater = true)
		{
			for (int k = 100; k < Main.maxTilesX - 100; k++)
			{
				for (int l = (int)GenVars.rockLayerLow - 20; l < Main.maxTilesY - 220; l++)
				{
					if (Main.tile[k, l].WallType == ModContent.WallType<VibrantWallWall>())
					{
						if (removeWater)
						{
							Tile tile = Main.tile[k, l];
							tile.LiquidType = 0;
							tile.LiquidAmount = 0;
						}
						else
						{
							if (Main.tile[k, l].TileType == ModContent.TileType<VibrantOreTile>() && Main.tile[k, l].HasTile && Main.tile[k, l].Slope == 0 && !Main.tile[k, l].IsHalfBlock)
							{
								bool oneSideIsClear = !Main.tile[k - 1, l].HasTile || !Main.tile[k + 1, l].HasTile || !Main.tile[k, l + 1].HasTile || !Main.tile[k, l - 1].HasTile;
								if (oneSideIsClear)
									for (int i = 0; i < 3; i++)
										if (SOTSTile.GenerateVibrantCrystal(k, l)) break;
							}
						}
					}
				}
			}
		}
		public static void GenerateEvostoneInMushroomBiome()
		{
			for (int k = 100; k < Main.maxTilesX - 100; k++)
			{
				for (int l = (int)GenVars.rockLayerLow - 20; l < Main.maxTilesY - 220; l++)
				{
					Tile tile = Main.tile[k, l];
					if (tile.TileType == TileID.MushroomGrass)
					{
						Tile tile1 = Main.tile[k + 1, l];
						Tile tile2 = Main.tile[k - 1, l];
						Tile tile3 = Main.tile[k, l + 1];
						Tile tile4 = Main.tile[k, l - 1];
						if (tile1.TileType == TileID.Mud && tile2.TileType == TileID.Mud && tile3.TileType == TileID.Mud && tile4.TileType == TileID.Mud)
						{
							if (WorldGen.genRand.NextBool(13))
							{
								Vector2 speed = new Vector2(6, 0).RotatedBy(MathHelper.ToRadians(WorldGen.genRand.NextFloat(360)));
								WorldGen.TileRunner(k, l, WorldGen.genRand.NextFloat(6, 8), Main.rand.Next(2, 7), ModContent.TileType<EvostoneTile>(), false, speed.X, speed.Y, false, true);
							}
						}
					}
				}
			}
		}
		public static void SmoothRegion(int spawnX, int spawnY, int width, int height, int whitelist = -1)
		{
			int startX = spawnX - width / 2;
			int startY = spawnY - height / 2;
			int endX = spawnX + width / 2;
			int endY = spawnY + height / 2;
			startX = (int)MathHelper.Clamp(startX, 20, Main.maxTilesX - 20);
			endX = (int)MathHelper.Clamp(endX, 20, Main.maxTilesX - 20);
			startY = (int)MathHelper.Clamp(startY, 20, Main.maxTilesY - 20);
			endY = (int)MathHelper.Clamp(endY, 20, Main.maxTilesY - 20);

			for (int i = startX; i <= endX; i++)
			{
				for (int j = startY; j <= endY; j++)
				{
					if (Main.tile[i, j].TileType == ModContent.TileType<GulaPortalPlatingTile>())
						continue;
					if ((whitelist == Main.tile[i, j].TileType) || (whitelist == -1 && Main.tile[i, j].TileType != 48 && Main.tile[i, j].TileType != 137 &&
						Main.tile[i, j].TileType != 232 && Main.tile[i, j].TileType != 191 &&
						Main.tile[i, j].TileType != 151 && Main.tile[i, j].TileType != 274))
					{
						if (!Main.tile[i, j - 1].HasTile)
						{
							if (WorldGen.SolidTile(i, j) &&
								TileID.Sets.CanBeClearedDuringGeneration[Main.tile[i, j].TileType])
							{
								if (!Main.tile[i - 1, j].IsHalfBlock &&
									!Main.tile[i + 1, j].IsHalfBlock &&
									Main.tile[i - 1, j].Slope == 0 &&
									Main.tile[i + 1, j].Slope == 0)
								{
									if (WorldGen.SolidTile(i, j + 1))
									{
										if (!WorldGen.SolidTile(i - 1, j) &&
											!Main.tile[i - 1, j + 1].IsHalfBlock &&
											WorldGen.SolidTile(i - 1, j + 1) && WorldGen.SolidTile(i + 1, j) &&
											!Main.tile[i + 1, j - 1].HasTile)
										{
											if (WorldGen.genRand.NextBool(2))
											{
												WorldGen.SlopeTile(i, j, 2);
											}
											else
											{
												WorldGen.PoundTile(i, j);
											}
										}
										else if (!WorldGen.SolidTile(i + 1, j) &&
												 !Main.tile[i + 1, j + 1].IsHalfBlock &&
												 WorldGen.SolidTile(i + 1, j + 1) && WorldGen.SolidTile(i - 1, j) &&
												 !Main.tile[i - 1, j - 1].HasTile)
										{
											if (WorldGen.genRand.NextBool(2))
											{
												WorldGen.SlopeTile(i, j, 1);
											}
											else
											{
												WorldGen.PoundTile(i, j);
											}
										}
										else if (WorldGen.SolidTile(i + 1, j + 1) &&
												 WorldGen.SolidTile(i - 1, j + 1) &&
												 !Main.tile[i + 1, j].HasTile &&
												 !Main.tile[i - 1, j].HasTile)
										{
											WorldGen.PoundTile(i, j);
										}

										if (WorldGen.SolidTile(i, j))
										{
											if (WorldGen.SolidTile(i - 1, j) && WorldGen.SolidTile(i + 1, j + 2) &&
												!Main.tile[i + 1, j].HasTile &&
												!Main.tile[i + 1, j + 1].HasTile &&
												!Main.tile[i - 1, j - 1].HasTile)
											{
												DespawnTile(i, j);
											}
											else if (WorldGen.SolidTile(i + 1, j) &&
													 WorldGen.SolidTile(i - 1, j + 2) &&
													 !Main.tile[i - 1, j].HasTile &&
													 !Main.tile[i - 1, j + 1].HasTile &&
													 !Main.tile[i + 1, j - 1].HasTile)
											{
												DespawnTile(i, j);
											}
											else if (!Main.tile[i - 1, j + 1].HasTile &&
													 !Main.tile[i - 1, j].HasTile &&
													 WorldGen.SolidTile(i + 1, j) && WorldGen.SolidTile(i, j + 2))
											{
												if (WorldGen.genRand.NextBool(5))
												{
													DespawnTile(i, j);
												}
												else if (WorldGen.genRand.NextBool(5))
												{
													WorldGen.PoundTile(i, j);
												}
												else
												{
													WorldGen.SlopeTile(i, j, 2);
												}
											}
											else if (!Main.tile[i + 1, j + 1].HasTile &&
													 !Main.tile[i + 1, j].HasTile &&
													 WorldGen.SolidTile(i - 1, j) && WorldGen.SolidTile(i, j + 2))
											{
												if (WorldGen.genRand.NextBool(5))
												{
													DespawnTile(i, j);
												}
												else if (WorldGen.genRand.NextBool(5))
												{
													WorldGen.PoundTile(i, j);
												}
												else
												{
													WorldGen.SlopeTile(i, j, 1);
												}
											}
										}
									}

									if (WorldGen.SolidTile(i, j) && !Main.tile[i - 1, j].HasTile &&
										!Main.tile[i + 1, j].HasTile)
									{
										DespawnTile(i, j);
									}
								}
							}
							else if (!Main.tile[i, j].HasTile && Main.tile[i, j + 1].TileType != 151 &&
									 Main.tile[i, j + 1].TileType != 274 &&
                                     Main.tile[i, j + 1].TileType != ModContent.TileType<GulaPortalPlatingTile>())
							{
								if (Main.tile[i + 1, j].TileType != 190 &&
									Main.tile[i + 1, j].TileType != 48 &&
									Main.tile[i + 1, j].TileType != 232 && WorldGen.SolidTile(i - 1, j + 1) &&
									WorldGen.SolidTile(i + 1, j) && !Main.tile[i - 1, j].HasTile &&
									!Main.tile[i + 1, j - 1].HasTile)
								{
									WorldGen.PlaceTile(i, j, Main.tile[i, j + 1].TileType, false, false, -1, 0);
									if (WorldGen.genRand.NextBool(2))
									{
										WorldGen.SlopeTile(i, j, 2);
									}
									else
									{
										WorldGen.PoundTile(i, j);
									}
								}

								if (Main.tile[i - 1, j].TileType != 190 &&
									Main.tile[i - 1, j].TileType != 48 &&
									Main.tile[i - 1, j].TileType != 232 && WorldGen.SolidTile(i + 1, j + 1) &&
									WorldGen.SolidTile(i - 1, j) && !Main.tile[i + 1, j].HasTile &&
									!Main.tile[i - 1, j - 1].HasTile)
								{
									WorldGen.PlaceTile(i, j, Main.tile[i, j + 1].TileType, false, false, -1, 0);
									if (WorldGen.genRand.NextBool(2))
									{
										WorldGen.SlopeTile(i, j, 1);
									}
									else
									{
										WorldGen.PoundTile(i, j);
									}
								}
							}
						}
						else if (!Main.tile[i, j + 1].HasTile && WorldGen.genRand.NextBool(2) &&
								 WorldGen.SolidTile(i, j) && !Main.tile[i - 1, j].IsHalfBlock &&
								 !Main.tile[i + 1, j].IsHalfBlock &&
								 Main.tile[i - 1, j].Slope == 0 &&
								 Main.tile[i + 1, j].Slope == 0 && WorldGen.SolidTile(i, j - 1))
						{
							if (WorldGen.SolidTile(i - 1, j) && !WorldGen.SolidTile(i + 1, j) &&
								WorldGen.SolidTile(i - 1, j - 1))
							{
								WorldGen.SlopeTile(i, j, 3);
							}
							else if (WorldGen.SolidTile(i + 1, j) && !WorldGen.SolidTile(i - 1, j) &&
									 WorldGen.SolidTile(i + 1, j - 1))
							{
								WorldGen.SlopeTile(i, j, 4);
							}
						}

						if (TileID.Sets.Conversion.Sand[Main.tile[i, j].TileType])
						{
							Tile.SmoothSlope(i, j, false);
						}
					}
				}
			}
			for (int i = startX; i <= endX; i++)
			{
				for (int j = startY; j <= endY; j++)
                {
                    if (Main.tile[i, j].TileType == ModContent.TileType<GulaPortalPlatingTile>())
                        continue;
                    bool canRun = WorldGen.genRand.NextBool(2) && !Main.tile[i, j - 1].HasTile && WorldGen.SolidTile(i, j);
					if (canRun && ((whitelist == Main.tile[i, j].TileType) ||
						(whitelist == -1 && Main.tile[i, j].TileType != 137 &&
						Main.tile[i, j].TileType != 48 &&
						Main.tile[i, j].TileType != 232 && Main.tile[i, j].TileType != 191 &&
						Main.tile[i, j].TileType != 151 && Main.tile[i, j].TileType != 274 &&
						Main.tile[i, j].TileType != 75 && Main.tile[i, j].TileType != 76 &&
						Main.tile[i - 1, j].TileType != 137 &&
						Main.tile[i + 1, j].TileType != 137)))
					{
						if (WorldGen.SolidTile(i, j + 1) && WorldGen.SolidTile(i + 1, j) &&
							!Main.tile[i - 1, j].HasTile)
						{
							WorldGen.SlopeTile(i, j, 2);
						}

						if (WorldGen.SolidTile(i, j + 1) && WorldGen.SolidTile(i - 1, j) &&
							!Main.tile[i + 1, j].HasTile)
						{
							WorldGen.SlopeTile(i, j, 1);
						}
					}

					if (Main.tile[i, j].Slope == (SlopeType)1 && !WorldGen.SolidTile(i - 1, j))
					{
						WorldGen.SlopeTile(i, j, 0);
						WorldGen.PoundTile(i, j);
					}

					if (Main.tile[i, j].Slope == (SlopeType)2 && !WorldGen.SolidTile(i + 1, j))
					{
						WorldGen.SlopeTile(i, j, 0);
						WorldGen.PoundTile(i, j);
					}
				}
			}
		}
		public static void DespawnTile(int spawnX, int spawnY)
		{
			Tile tile = Main.tile[spawnX, spawnY];
			tile.HasTile = false;
			NetMessage.SendData(MessageID.TileManipulation, -1, -1, null, 0, spawnX, spawnY, 0f, 0, 0, 0);
		}
		public static void PlaceSetpiecesInMushroomBiome()
        {
			Point[] mushroomBiomes = GenVars.mushroomBiomesPosition;
			int total = mushroomBiomes.Length;
			for (int A = 0; A < total; A++)
			{
				int bestDistance = 0;
				Point position = mushroomBiomes[A];
				if(WorldGen.InWorld((int)position.X, (int)position.Y, 50) && A % 2 == 0)
                {
					Point16 pos = new Point16(position);
					Point16 bestPoint = pos;
					for (int i = -60; i <= 60; i++)
					{
						for (int j = -60; j <= 60; j++)
						{
							pos = new Point16(position) + new Point16(i, j);
							int blocksL = CountBlocksInDirection(pos, new Point16(-1, 0), TileID.MushroomGrass, 60);
							int blocksR = CountBlocksInDirection(pos, new Point16(1, 0), TileID.MushroomGrass, 60);
							int blocksU = CountBlocksInDirection(pos, new Point16(0, -1), TileID.MushroomGrass, 60);
							int blocksD = CountBlocksInDirection(pos, new Point16(0, 1), TileID.MushroomGrass, 60);
							int totalBlocksChecked = blocksL + blocksR + blocksU + blocksD;
							if (totalBlocksChecked > bestDistance)
							{
								bestDistance = totalBlocksChecked;
								bestPoint = pos;
							}
						}
					}
					Point16 spawnTilePos = bestPoint;
					Tile tile = Framing.GetTileSafely(spawnTilePos);
					for (int j = 12; j >= -12; j--)
					{
						for (int i = -12; i <= 12; i++)
						{
							pos = spawnTilePos + new Point16(i, j);
							float circularLength = new Point16(i, j).ToVector2().Length();
							if (circularLength <= 5.0f)
							{
								tile = Framing.GetTileSafely(pos);
								tile.HasTile = false;
								tile.IsHalfBlock = false;
								tile.Slope = 0;
								if (j >= 2) //bottom layer
								{
									tile.HasTile = true;
									tile.TileType = (ushort)ModContent.TileType<GlowSilkTile>();
									tile.Slope = 0;
									tile.IsHalfBlock = false;
								}
							}
						}
					}
					WorldGen.PlaceTile(spawnTilePos.X, spawnTilePos.Y + 1, ModContent.TileType<SilkCocoonTile>(), true, true, -1, 2);
					GenerateSilkWeb(spawnTilePos.X, spawnTilePos.Y);
					for (int j = 12; j >= -12; j--)
					{
						for (int i = -12; i <= 12; i++)
						{
							pos = spawnTilePos + new Point16(i, j);
							float circularLength = new Point16(i, j).ToVector2().Length();
							if (circularLength <= 11.0f + Main.rand.NextFloat(-1, 1))
							{
								tile = Framing.GetTileSafely(pos);
								if ((tile.HasTile && TrueTileSolid(pos.X, pos.Y)) || (circularLength <= 4.0f + Main.rand.NextFloat(-1, 1) && !tile.HasTile))
								{
									tile.HasTile = true;
									tile.TileType = (ushort)ModContent.TileType<GlowSilkTile>();
									tile.Slope = 0;
									tile.IsHalfBlock = false;
								}
								else
								{
									if (!tile.HasTile && !WorldGen.genRand.NextBool(10 - (int)circularLength / 2))
									{
										tile.HasTile = true;
										tile.TileType = (ushort)ModContent.TileType<GlowWebTile>();
										tile.Slope = 0;
										tile.IsHalfBlock = false;
									}
								}
							}
						}
					}
					SmoothRegion(spawnTilePos.X, spawnTilePos.Y, 160, 160, ModContent.TileType<GlowSilkTile>());
				}
			}
		}
		public static int CountBlocksInDirection(Point16 start, Point16 direction, int BlockType, int distance)
        {
			for(int i = 0; i < distance; i++)
            {
				start += direction;
				Tile tile = Framing.GetTileSafely(start);
				if(TrueTileSolid(start.X, start.Y))
                {
					if (tile.TileType == BlockType || BlockType < 0)
						return i;
					else
						return -distance;
                }
			}
			return -distance;
        }
		public static void GenerateSilkWeb(int spawnX, int spawnY)
		{
			float iRand = WorldGen.genRand.NextFloat(360);
			for (int k = 0; k < 8; k++)
			{
				float rand = WorldGen.genRand.NextFloat(-20, 20);
				if (k != 0 && k != 4) //this is to make the shape more vertical, AKA destroy less mushroom biom trees
                {
					Vector2 direction = new Vector2(1, 0).RotatedBy(MathHelper.ToRadians(k * 45 + rand + iRand));
					Vector2 spawnPos = new Vector2(spawnX, spawnY);
					for (float j = 0; j < 80; j++)
					{
						if (TrueTileSolid((int)spawnPos.X, (int)spawnPos.Y) && Framing.GetTileSafely((int)spawnPos.X, (int)spawnPos.Y).TileType != ModContent.TileType<GlowSilkTile>())
						{
							for (int a1 = 8; a1 >= -8; a1--)
							{
								for (int b1 = -8; b1 <= 8; b1++)
								{
									Tile tile;
									float circularLength = new Vector2(a1, b1).Length();
									if (circularLength <= 5.0f + Main.rand.NextFloat(-2, 1))
									{
										tile = Framing.GetTileSafely((int)spawnPos.X + a1, (int)spawnPos.Y + b1);
										if (TrueTileSolid((int)spawnPos.X + a1, (int)spawnPos.Y + b1))
										{
											tile.HasTile = true;
											tile.TileType = (ushort)ModContent.TileType<GlowSilkTile>();
											tile.Slope = 0;
											tile.IsHalfBlock = false;
										}
									}
								}
							}
							break;
						}
						for (int a = 0; a < 9; a++)
						{
							Vector2 circular = new Vector2(a == 0 ? 0 : WorldGen.genRand.NextFloat(0.15f) + 0.02f * j, 0).RotatedBy(a * MathHelper.PiOver4);
							Vector2 pos = (spawnPos + circular);
							Tile tile = Framing.GetTileSafely((int)pos.X, (int)pos.Y);
							if (!tile.HasTile || tile.TileType == ModContent.TileType<GlowWebTile>())
							{
								tile.HasTile = true;
								tile.TileType = (ushort)ModContent.TileType<GlowSilkTile>();
								tile.Slope = 0;
								tile.IsHalfBlock = false;
							}
						}
						for (int a = 1; a < 9; a++)
						{
							Vector2 circular = new Vector2(a == 0 ? 0 : WorldGen.genRand.NextFloat(0.3f) + 0.04f * j + 0.2f, 0).RotatedBy(a * MathHelper.PiOver4);
							Vector2 pos = (spawnPos + circular);
							Tile tile = Framing.GetTileSafely((int)pos.X, (int)pos.Y);
							if (!tile.HasTile)
							{
								tile.HasTile = true;
								tile.TileType = (ushort)ModContent.TileType<GlowWebTile>();
								tile.Slope = 0;
								tile.IsHalfBlock = false;
							}
						}
						spawnPos += direction;
					}
				}
			}
		}
		/// <summary>
		/// Attempts to clean up floating trees by updating their tile frames.
		/// Not sure if this works
		/// </summary>
		public static void CleanUpFloatingTrees()
		{
			//WorldGen.SkipFramingBecauseOfGen = false;
			for (int i = 50; i < Main.maxTilesX - 50; i++)
			{
				for (int j = (int)GenVars.worldSurface; j > 50; j--)
				{
					Tile tile = Main.tile[i, j];
					Tile tileD = Main.tile[i, j + 1];
					if (tile.HasTile && (WorldGen.IsTreeType(tile.TileType) || tile.TileType == TileID.PalmTree) && !tileD.HasTile)
					{
						WorldGen.SquareTileFrame(i, j);
					}
                }
			}
			//WorldGen.SkipFramingBecauseOfGen = true;
		}
		public static void PlacePeanuts()
		{
			for (int i = 50; i < Main.maxTilesX - 50; i++)
			{
				for (int j = (int)GenVars.worldSurface; j > 50; j--)
				{
					Tile tile = Main.tile[i, j];
					if (tile.Slope == 0 && !tile.IsHalfBlock && tile.HasUnactuatedTile && WorldGen.genRand.NextBool(36) && tile.TileType == TileID.Grass && tile.WallType == 0)
					{
						Tile tileAbove = Main.tile[i, j - 1];
						if (!tileAbove.HasTile || tileAbove.TileType == TileID.Plants || tileAbove.TileType == TileID.Cobweb || tileAbove.TileType == TileID.Plants2)
						{
							int nearbyAllowance = 48;
							int LeftRange = Utils.Clamp(i - nearbyAllowance, 1, Main.maxTilesX - 1 - 1);
							int RightRange = Utils.Clamp(i + nearbyAllowance, 1, Main.maxTilesX - 1 - 1);
							int UpRange = Utils.Clamp(j - nearbyAllowance, 1, Main.maxTilesY - 1 - 1);
							int DownRange = Utils.Clamp(j + nearbyAllowance, 1, Main.maxTilesY - 1 - 1);
							int totalNearby = 0;
							for (int k = LeftRange; k < RightRange; k++)
							{
								for (int l = UpRange; l < DownRange; l++)
								{
									if (Main.tile[k, l].HasTile && Main.tile[k, l].TileType == ModContent.TileType<PeanutBushTile>())
									{
										totalNearby++;
										break;
									}
								}
								if (totalNearby >= 1)
									break;
							}
							if(totalNearby < 1) //Will not spawn if there bushes are within 48 blocks
							{
								tileAbove.HasTile = false;
								WorldGen.PlaceTile(i, j - 1, ModContent.TileType<PeanutBushTile>(), false, true, -1, WorldGen.genRand.Next(3));
								if (Main.tile[i, j - 1].TileType == ModContent.TileType<PeanutBushTile>())
									for (int attempts = 0; attempts < 25; attempts++)
									{
										PeanutBushTile.AttemptToGrowPeanuts(i, j - 1);
									}
							}
						}
					}
				}
			}
		}
	}
}